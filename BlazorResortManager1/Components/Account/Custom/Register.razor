@page "/Account/Register"
@inject IStringLocalizer<AppLanguage> local

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorResortManager1.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>@local["Register"]</PageTitle>

<RadzenRow Style="width: 100%; height: 100%">
    <RadzenColumn>
        <RadzenCard class="rz-background-color-primary" Style="width: 100%; height: 100%; align-items: center; color: white;">
            <h1 class="text-5xl font-bold">@local["Create a new account"]</h1>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <RadzenStack JustifyContent="JustifyContent.Center" Style="width: 100%">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <RadzenStack JustifyContent="JustifyContent.Left" Orientation="Orientation.Horizontal" Style="width: 100%" Gap="1rem">
                    <label for="username" class="w-1/4">@local["Username"]</label>
                    <div class="relative w-3/4">
                        <InputText @bind-Value="Input.UserName" class="rz-textbox w-full rounded-md" autocomplete="username" aria-required="true" placeholder=@local["username"] />
                        <ValidationMessage For="() => Input.UserName" class="w-full text-red-500 absolute -bottom-4 right-0.5 text-xs" />
                    </div>
                </RadzenStack>

                <RadzenStack JustifyContent="JustifyContent.Left" Orientation="Orientation.Horizontal" Style="width: 100%" Gap="1rem">
                    <label for="email" class="w-1/4">Email</label>
                    <div class="relative w-3/4">
                        <InputText @bind-Value="Input.Email" class="rz-textbox w-full rounded-md" aria-required="true" placeholder="name@example.com" />
                        <ValidationMessage For="() => Input.Email" class="w-full text-red-500 absolute -bottom-4 right-0.5 text-xs" />
                    </div>
                </RadzenStack>

                <RadzenStack JustifyContent="JustifyContent.Left" Orientation="Orientation.Horizontal" Style="width: 100%" Gap="1rem">
                    <label for="password" class="w-1/4">@local["Password"]</label>
                    <div class="relative w-3/4">
                        <InputText type="password" @bind-Value="Input.Password" class="rz-textbox w-full rounded-md" autocomplete="new-password" aria-required="true" placeholder=@local["Password"]/>
                    </div>
                </RadzenStack>

                <RadzenStack JustifyContent="JustifyContent.Left" Orientation="Orientation.Horizontal" Style="width: 100%" Gap="1rem">
                    <label for="confirm-password" class="w-1/4">@local["Confirm password"]</label>
                    <div class="relative w-3/4">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="rz-textbox w-full rounded-md" autocomplete="new-password" aria-required="true" placeholder=@local["Password"] />
                        <ValidationMessage For="() => Input.ConfirmPassword" class="w-full text-red-500 absolute -bottom-4 right-0.5 text-xs" />
                    </div>
                </RadzenStack>

                <RadzenStack Style="width: 100%" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <button type="submit" class="rz-background-color-primary rz-ripple min-h-8 w-1/2 rounded-md text-white hover:bg-rz-bg-dark">@local["Register"]</button>
                    <a href=@(ReturnUrl ?? "/resort") class="leading-8 min-h-8 w-1/2 text-center text-xs hover:underline">@local["Go back to dashboard"]</a>
                </RadzenStack>
            </RadzenStack>
        </EditForm>

        @* <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section> *@
    </RadzenColumn>
</RadzenRow>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        user.UserName = Input.UserName;
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            // RedirectManager.RedirectTo(
            //     "Account/RegisterConfirmation",
            //     new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        //await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl ?? "/resort");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 4)]
        [Display(Name = "UserName")]
        public string UserName { get; set; } = "";
    }
}
