@page "/log"
@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorResortManager1.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Log in</PageTitle>

<RadzenRow Style="width: 100%; height: 100%">
    <RadzenColumn>
        <RadzenCard class="rz-background-color-primary" Style="width: 100%; height: 100%; align-items: center; color: white;">
            <h1 class="text-5xl font-bold">Log in to your account</h1>
            @* @result *@
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">

            <RadzenStack JustifyContent="JustifyContent.Center" Style="width: 100%">
                <DataAnnotationsValidator />
                @* <ValidationSummary class="text-danger" role="alert" /> *@

                <RadzenStack JustifyContent="JustifyContent.Left" Orientation="Orientation.Horizontal" Style="width: 100%" Gap="1rem">
                    <label for="email" class="w-1/4">Username</label>
                    <div class="relative w-3/4">
                        <InputText @bind-Value="Input.UserName" class="rz-textbox w-full rounded-md" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <ValidationMessage For="() => Input.UserName" class="w-full  text-red-500 absolute -bottom-4 right-0.5 text-xs" />
                    </div>
                </RadzenStack>

                <RadzenStack JustifyContent="JustifyContent.Left" Orientation="Orientation.Horizontal" Style="width: 100%; position: relative" Gap="1rem">
                    <label for="email" class="w-1/4">Password</label>
                    <div class="relative w-3/4">
                        <InputText type="password" @bind-Value="Input.Password" class="rz-textbox w-full rounded-md" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.Password" class="w-full  text-red-500 absolute -bottom-4 right-0.5 text-xs" />
                    </div>
                </RadzenStack>

@*                 <div class="w-full">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div> *@
                <div class="w-full">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <RadzenStack Style="width: 100%" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <button type="submit" class="rz-background-color-primary rz-ripple min-h-8 w-1/2 rounded-md text-white hover:bg-rz-bg-dark">Log in</button>
                    @* <div class="group min-h-8 w-1/2 items-center justify-center"> *@
                        <a href="Account/ForgotPassword" class="leading-8 min-h-8 w-1/2 text-center text-xs hover:underline">I forgot my password</a>
                    @* </div> *@

                </RadzenStack>
                <hr />
                <div>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="hover:underline">Register</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation" class="hover:underline">Resend email confirmation</a>
                    </p>
                </div>
            </RadzenStack>  
            </EditForm>
        
        @* <br />
        <hr />

        <RadzenStack Gap="0.5rem">

            <RadzenLink Text="Register" Path="/account/register" />
            <RadzenLink Text="I forgot my password" Path="/account/register" />
        </RadzenStack> *@
    </RadzenColumn>

</RadzenRow>

@code {
    private void passFromLogin(InputModel args)
    {
        Input = args;
        Console.WriteLine("do a flip");
        // await LoginUser();
    }
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm( FormName = "login")]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(HttpContext is null)
        {
            HttpContext = HttpContextAccessor.HttpContext;
        }
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            NavigationManager.NavigateTo("Account/Login", true);
        }

    }

    private async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/resort");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        //[EmailAddress]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
