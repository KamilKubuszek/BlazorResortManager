@page "/resort/add"
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Roles = "Admin")]

@inject IStringLocalizer<AppLanguage> local
@inject DialogService dialogService
@inject NotificationService notificationService
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject ResortChangeManager resortChangeManager

<h3 class="text-3xl font-bold">@local["Add Resort"]</h3>

<h1>@local["Add ID of a User Who Requested Resort Registration"]</h1>

@if (resortDto != null)
{
    <RadzenTemplateForm Data="resortDto" TItem="Resort" Submit="addResort">
        <RadzenStack Style="width: 100%">
            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Email"]">
                        <RadzenTextBox Name="email" @bind-Value="resortDto.email" Style="width: 100%;" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="email" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem" Style="width: 100%">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Webpage"]">
                        <RadzenTextBox Name="webpage" @bind-Value="resortDto.webpage" Style="width: 100%;" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="webpage" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Phone Number"]">
                        <RadzenMask Mask="+** *** *** ***" Name="phone" @bind-Value="resortDto.phoneNumber" Style="width: 100%;" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="phone" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Description"]">
                        <RadzenTextArea Name="description" Rows="9" @bind-Value="resortDto.description" Style="width: 100%;" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="description" /></RadzenColumn>
            </RadzenRow>

            <RadzenButton Text="@local["Submit Changes"]" ButtonType="ButtonType.Submit" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@code {
    private Resort? resortDto = new Resort();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        resortDto.id = Guid.NewGuid();
    }

    private async Task addResort()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(resortDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(resortDto, context, results, true);

        if (isValid)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                database.resorts.Add(resortDto);

                dialogService.Open<_LoadingTaskDialog>(
                    "", new Dictionary<string, object> { { "displayMessage", local["Adding data..."] } },
                    new DialogOptions { CloseDialogOnEsc = false, ShowClose = false });

                try
                {
                    await database.SaveChangesAsync();
                    await Task.Delay(2000); // Simulate processing delay
                    dialogService.Close();
                }
                catch
                {
                    error = true;
                }
            }
        }
        else
        {
            error = true;
        }

        var notifMessage = new NotificationMessage
            {
                Severity = !error ? NotificationSeverity.Success : NotificationSeverity.Error,
                Summary = !error ? local["Edited data successfully!"] : local["There was an error while executing the request"],
                Duration = 3000
            };

        notificationService.Notify(notifMessage);
    }
}
