@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject DialogService DialogService

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/resorts"


<h3>Resorts</h3>

@if (loading)
{
    <div>loading... </div>
}
else
{
    @if (resorts != null)
    {
        <RadzenDropDown 
            Change="@setResort" 
            @bind-Value=@dropdownSelectedResortId
            Data=@resorts 
            TValue="Guid" 
            TextProperty="name" 
            ValueProperty="id" AllowFiltering="true" Name="DropDownResorts">
        </RadzenDropDown>
    }
    if(selectedResort != null)
    {
        <RadzenButton Text="add another track" Click=@openAddTrackDialog />
        <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowSorting="true" 
                Data="@selectedResort.tracks" TItem="Track">
            <Template Context="track">
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@track.parameters">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(TrackParameter.name)" Title="Name" />
                        <RadzenDataGridColumn Property="@nameof(TrackParameter.value)" Title="Value" />
                        <RadzenDataGridColumn Property="@nameof(TrackParameter.value)" Title="Unit value">
                                <Template Context="parameter">
                                    @(parameter.value+" some unit of parameter")
                                </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn Property="name" Title="Name"/>
            </Columns>
        </RadzenDataGrid>


        <RadzenDataGrid @ref="grid2" AllowFiltering="true" AllowSorting="true"
                        Data="@selectedResort.lifts" TItem="Lift">
            <Template Context="lift">
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@lift.parameters">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(LiftParameter.name)" Title="Name" />
                        <RadzenDataGridColumn Property="@nameof(LiftParameter.value)" Title="Value" />
                        <RadzenDataGridColumn Property="@nameof(LiftParameter.value)" Title="Unit value">
                            <Template Context="parameter">
                                @(parameter.value + " some unit of parameter")
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn Property="name" Title="Name" />
            </Columns>
        </RadzenDataGrid>
    }
}

@code {
    RadzenDataGrid<Track> grid;
    RadzenDataGrid<Lift> grid2;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private Guid? userId = null;
    private bool loading = false;

    private Resort[]? resorts { get; set; }
    private Guid dropdownSelectedResortId { get; set; }
    private Resort? selectedResort { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        
        var authState = await authenticationState;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = new Guid(user.FindFirst(
                c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        }

        await Task.Run(loadResortData);

        loading = false;
    }

    protected async Task loadResortData()
    {

        using (var database = contextFactory.CreateDbContext())
        {
            var slopeIdsByPermit = database.permits
                .Where(e => e.userId == userId.ToString())
                .Select(e => e.resortId)
                .ToArray();


            resorts = await database.resorts
                .Where(e => slopeIdsByPermit.Contains(e.id))
            //.Select(e => new Resort{ id = e.id })
            //.AsNoTracking()
            .ToArrayAsync();
        }
        Console.WriteLine("dataloaded");
    }

    protected async Task setResort()
    {
        loading = true;

        using (var database = contextFactory.CreateDbContext())
        {
            selectedResort = await database.resorts
                .Where(e => e.id == dropdownSelectedResortId)    
                .Include(e => e.tracks)
                    .ThenInclude(e => e.parameters)
                .Include(e => e.lifts)
                    .ThenInclude(e => e.parameters)
                .Include(e => e.resortParameters)
                .AsNoTracking()
                .AsSplitQuery()
                .FirstOrDefaultAsync();
        }

        loading = false;

    }

    public async Task openAddTrackDialog()
    {
        Console.WriteLine("Opening dialog... ");
        await DialogService.OpenAsync<AddTrackDialogCard>("Add new track",
               new Dictionary<string, object>() { { "ResortId", dropdownSelectedResortId } },
               new DialogOptions() { Width = "700px", Height = "512px" });
        Console.WriteLine("opened!");
    }
} 
