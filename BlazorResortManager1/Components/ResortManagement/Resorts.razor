@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject DialogService DialogService
@attribute [Authorize]

@using Radzen.Blazor.Rendering

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/resort"

<h3>Resorts</h3>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" >
        <RadzenColumn Size="4">
            
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn Size="2">
            <_ResortSidebar />
        </RadzenColumn>
        <RadzenColumn>

        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn Size="2">
            
            @if (selectedResort != null)
            {
                <p>
                    Current Location:
                    @(selectedResort.yrNoCityCode != null
                        ? selectedResort.yrNoCityCode.country + ", " + selectedResort.yrNoCityCode.cityName
                        : "not set")
                </p>

                <iframe style="display: block; float: left; height: 361.9px; width: fit-content;"
                        src=@("https://www.yr.no/en/content/"+selectedResort.yrNoCityCode.code+"/card.html")>
                </iframe>

                @*             <iframe style="display: block; float: left; height: 361.9px; width: fit-content;"
            src=@("https: //www.yr.no/en/content/"+selectedResort.yrNoCityCode.code+"/table.html")>
            </iframe> *@
            }
        </RadzenColumn>
        <RadzenColumn>
           


        </RadzenColumn> 
    </RadzenRow>
</RadzenStack>
@if (loading)
{
    <div>loading... </div>
}
else
{

    if (selectedResort != null)
    {
        //utility buttons

        <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowSorting="true"
                        Data="@selectedResort.tracks" TItem="Track">
            <Template Context="track">
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@track.parameters">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(TrackParameter.name)" Title="Name" />
                        <RadzenDataGridColumn Property="@nameof(TrackParameter.value)" Title="Value" />
                        <RadzenDataGridColumn Property="@nameof(TrackParameter.value)" Title="Unit value">

                            <Template Context="parameter">
                                @(parameter.value + " some unit of parameter")
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn Property="name" Title="Name" />
            </Columns>
        </RadzenDataGrid>


        <RadzenDataGrid @ref="grid2" AllowFiltering="true" AllowSorting="true"
                        Data="@selectedResort.lifts" TItem="Lift">
            <Template Context="lift">
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@lift.parameters">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(LiftParameter.name)" Title="Name" />
                        <RadzenDataGridColumn Property="@nameof(LiftParameter.value)" Title="Value" />
                        <RadzenDataGridColumn Property="@nameof(LiftParameter.value)" Title="Unit value">
                            <Template Context="parameter">
                                @(parameter.value + " some unit of parameter")
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn Property="name" Title="Name" />
            </Columns>
        </RadzenDataGrid>

        <RadzenButton Text="add another track" Click=@openAddTrackDialog @ref="locationPopupButton" />

        <RadzenButton Text="Change Resort Location" Click="@(args => locationPopup.ToggleAsync(locationPopupButton.Element))" />
        <Popup @ref="locationPopup" Open="@loadLocations"
               Style="display:none;position:absolute;height:300px;width:600px;padding:5px;border:var(--rz-panel-border);background-color:var(--rz-panel-background-color);">
            <RadzenDataList TItem="YrNoCityCode" Data="@CityCodes" AllowVirtualization=true Style="height:100%;overflow:auto;">
                <Template Context="cityCode">
                    <RadzenCard @onclick="async () => setLocation(cityCode)">
                        @cityCode.cityName
                        <hr />
                        <RadzenRow>
                            <RadzenColumn>
                                Country: @cityCode.country
                            </RadzenColumn>
                            <RadzenColumn>
                                Code: @cityCode.code
                            </RadzenColumn>
                        </RadzenRow>

                    </RadzenCard>
                </Template>
            </RadzenDataList>
        </Popup>

    }


}
@if (resorts != null)
{
    <RadzenDropDown Style="width: 100%; text-align: center;"
                    Change="@setResort"
                    @bind-Value=@dropdownSelectedResortId
                    Data=@resorts
                    TValue="Guid"
                    TextProperty="name"
                    ValueProperty="id" AllowFiltering="true" Name="DropDownResorts">
    </RadzenDropDown>
}



@code {
    RadzenDataGrid<Track> grid;
    RadzenDataGrid<Lift> grid2;

    RadzenButton locationPopupButton;
    Popup locationPopup;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private Guid? userId = null;
    private bool loading = false;

    private Resort[]? resorts;
    private Guid dropdownSelectedResortId;
    private Resort? selectedResort;
    private YrNoCityCode[]? CityCodes;


    protected override async Task OnInitializedAsync()
    {
        loading = true;

        var authState = await authenticationState;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = new Guid(user.FindFirst(
                c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        }

        await Task.Run(loadResortData);
        await Task.Run(loadLocations);

        //make first resort autoselected
        if (resorts != null && resorts.Count() > 0)
        {
            dropdownSelectedResortId = resorts[0].id;
            await setResort();
        }

        loading = false;
    }

    protected async Task loadResortData()
    {

        using (var database = contextFactory.CreateDbContext())
        {
            var slopeIdsByPermit = database.permits
                .Where(e => e.userId == userId.ToString())
                .Select(e => e.resortId)
                .ToArray();


            resorts = await database.resorts
                .Where(e => slopeIdsByPermit.Contains(e.id))
            //.Select(e => new Resort{ id = e.id })
            //.AsNoTracking()
            .ToArrayAsync();
        }
        
        Console.WriteLine("dataloaded");
    }

    protected async Task setResort()
    {
        loading = true;

        using (var database = contextFactory.CreateDbContext())
        {
            selectedResort = await database.resorts
                .Where(e => e.id == dropdownSelectedResortId)    
                .Include(e => e.tracks)
                    .ThenInclude(e => e.parameters)
                .Include(e => e.lifts)
                    .ThenInclude(e => e.parameters)
                .Include(e => e.resortParameters)
                .Include(e => e.yrNoCityCode)
                    .ThenInclude(e => e.yrNoLanguageCode)
                .AsNoTracking()
                .AsSplitQuery()
                .FirstOrDefaultAsync();
        }

        loading = false;

    }

    private async Task openAddTrackDialog()
    {
        Console.WriteLine("Opening dialog... ");
        await DialogService.OpenAsync<AddTrackDialogCard>("Add new track",
               new Dictionary<string, object>() { { "ResortId", dropdownSelectedResortId } },
               new DialogOptions() { Width = "700px", Height = "512px" });
        Console.WriteLine("opened!");
    }

    private async Task loadLocations()
    {
        using(var database = contextFactory.CreateDbContext())
        {
            CityCodes = database.cityCodes.ToArray();
        }
    }

    private async Task setLocation(YrNoCityCode cityCode)
    {
        using (var database = contextFactory.CreateDbContext())
        {
            var Resort = database.resorts.FirstOrDefault(e => e.id == dropdownSelectedResortId);
            Resort.yrNoCityCodeId = cityCode.id;
            Console.WriteLine("new location: " + cityCode.code);
            await database.SaveChangesAsync();
        }

        if(selectedResort != null)
        {
            selectedResort.yrNoCityCodeId = cityCode.id;
            selectedResort.yrNoCityCode = cityCode;
        }
        StateHasChanged();
        await locationPopup.CloseAsync();
        
    }
} 
