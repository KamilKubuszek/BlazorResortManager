@page "/resort/status/add"

@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<h3 class="text-3xl font-bold">Update status</h3>

@if (statusSheetDto is not null)
{
    <RadzenTemplateForm Method="post" TItem="StatusSheet" Data="statusSheetDto" Submit="submitForm">
        <RadzenDataGrid Data="statusSheetDto.trackStatuses" TItem="TrackStatus" AllowColumnResize="true" ColumnWidth="100px">
            <Columns>
                <RadzenDataGridColumn Title="name">
                    <Template Context="tstatus">
                        @tstatus.parentTrack.name
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="opened">
                    <Template Context="tstatus">
                        <RadzenCheckBox @bind-Value=tstatus.opened />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="snow cover">
                    <Template Context="tstatus">
                        <RadzenNumeric @bind-Value=tstatus.snowCover />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="opening time">
                    <Template Context="tstatus">
                        <RadzenDatePicker @bind-Value=@tstatus.openingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="closing time">
                    <Template Context="tstatus">
                        <RadzenDatePicker @bind-Value=@tstatus.openingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenDataGrid Data="statusSheetDto.liftStatuses" TItem="LiftStatus" AllowColumnResize="true" ColumnWidth="100px">
            <Columns>
                <RadzenDataGridColumn Title="name">
                    <Template Context="lstatus">
                        @lstatus.parentLift.name
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="opened">
                    <Template Context="lstatus">
                        <RadzenCheckBox @bind-Value=lstatus.opened />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="opening time">
                    <Template Context="lstatus">
                        <RadzenDatePicker @bind-Value=@lstatus.openingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="closing time">
                    <Template Context="lstatus">
                        <RadzenDatePicker @bind-Value=@lstatus.openingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenCheckBox Name="prVf" @bind-Value=statusSheetDto.productionVersion />
        <RadzenLabel Component="prVf">Activate status on submit</RadzenLabel>

        <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
    </RadzenTemplateForm>
}
else
{
    <p>select resort first</p>
}

@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService
@implements IDisposable
@code {
    [CascadingParameter]
    private Resort? selectedResort { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private Resort? resortData { get; set; } = null;

    private StatusSheet? statusSheetDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(statusSheetDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(statusSheetDto, context, results, true);

        if (isValid)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                dialogService.Open<_LoadingTaskDialog>(
                   "", new Dictionary<string, object>() { { "displayMessage", "editing data..." } },
                       new DialogOptions() { CloseDialogOnEsc = false, ShowClose = false });




                //prepare new object to add to database   
                if(statusSheetDto.resortStatus == null)
                {
                    Console.WriteLine("status is null?");
                }
                try
                {
                    // Console.WriteLine(statusSheetDto.id);

                    // var a = database.resortStatuses.FirstOrDefault(e => e.statusSheetId == statusSheetDto.id);
                    // Console.WriteLine(JsonSerializer.Serialize(a, new JsonSerializerOptions { WriteIndented = true, ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles }));

                    var rstatus = new ResortStatus()
                    {
                        id = Guid.NewGuid(),
                        opened = statusSheetDto.resortStatus.opened,
                        openingTime = statusSheetDto.resortStatus.openingTime,
                        closingTime = statusSheetDto.resortStatus.closingTime,
                        statusSheetId = statusSheetDto.resortStatus.statusSheetId,
                        parentResortId = statusSheetDto.resortStatus.parentResortId
                    };

                    var tstatuses = new List<TrackStatus>();
                    var lstatuses = new List<LiftStatus>();
                    foreach(var tstatus in statusSheetDto.trackStatuses)
                    {
                        tstatuses.Add(new()
                        {
                            id = Guid.NewGuid(),
                            opened = tstatus.opened,
                            snowCover = tstatus.snowCover,
                            openingTime = tstatus.openingTime,
                            closingTime = tstatus.closingTime,
                            parentTrackId = tstatus.parentTrackId,
                            statusSheetId = tstatus.statusSheetId
                        });
                    }
                    foreach (var lstatus in statusSheetDto.liftStatuses)
                    {
                        lstatuses.Add(new()
                        {
                            id = Guid.NewGuid(),
                            opened = lstatus.opened,
                            openingTime = lstatus.openingTime,
                            closingTime = lstatus.closingTime,
                            parentLiftId = lstatus.parentLiftId,
                            statusSheetId = lstatus.statusSheetId
                        });
                    }

                    var sheet = new StatusSheet()
                    {
                        id = Guid.NewGuid(),
                        productionVersion = statusSheetDto.productionVersion,
                        dateTime = DateTime.Now,
                        resortId = statusSheetDto.resortId,
                        resortStatus = rstatus,
                        liftStatuses = lstatuses,
                        trackStatuses = tstatuses
                    };

                    database.statusSheets.Add(sheet);

                    await database.SaveChangesAsync();
                    await Task.Delay(2000);
                    dialogService.Close();

                }
                catch
                {
                    error = true;
                    dialogService.Close();
                }
            }
        }
        else
            error = true;

        var notifMessage = new NotificationMessage();
        if (!error)
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Updated data successfully!",
                    Duration = 3000
                };
        }
        else
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "There was an error while executing the request",
                    Duration = 3000
                };
        }
        notificationService.Notify(notifMessage);
        // navigationManager.NavigateTo("/resort/status");
    }

    private void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {

                statusSheetDto = database.statusSheets
                                    .OrderByDescending(e => e.dateTime)
                                    .Include(e => e.trackStatuses)
                                    .ThenInclude(e => e.parentTrack)
                                    .Include(e => e.liftStatuses)
                                    .ThenInclude(e => e.parentLift)
                                    .Include(e => e.resortStatus)
                                    .ThenInclude(e => e.parentResort)
                                    .AsSplitQuery()
                                    .AsNoTracking()
                                    .FirstOrDefault(e => e.resortId == selectedResort.id && e.productionVersion == true);

                // var lifts = database.lifts.Where(e => e.resortId == selectedResort.id);
                // if(lifts.Count() != statusSheetDto.liftStatuses.Count())
                // {
                //     foreach(var lift in lifts)
                //     {
                //         var existingStatus = statusSheetDto.liftStatuses.FirstOrDefault(e => e.parentLiftId == lift.id);
                //         if(existingStatus is null)
                //         {
                //             //from s in statusSheetDto.liftStatuses where s.parentLiftId == lift.id select Lift;
                //             // statusSheetDto.liftStatuses.FirstOrDefault(e => e.parentLiftId == lift.id) = new LiftStatus()
                //             //     {
                //             //         parentLift = lift
                //             //     };
                            
                //         }
                //     }
                // }
            }
           // Console.WriteLine(JsonSerializer.Serialize(statusSheetDto, new JsonSerializerOptions { WriteIndented = true, ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles }));
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
