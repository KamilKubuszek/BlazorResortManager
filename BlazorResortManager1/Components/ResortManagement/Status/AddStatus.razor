@page "/resort/status/add"

@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject IStringLocalizer<AppLanguage> local

<h3 class="text-3xl font-bold">@local["UpdateStatus"]</h3>

@if (statusSheetDto is not null)
{
    <RadzenTemplateForm Method="post" TItem="StatusSheet" Data="statusSheetDto" Submit="submitForm">
        <RadzenDataGrid Data="statusSheetDto.trackStatuses" TItem="TrackStatus" AllowColumnResize="true" ColumnWidth="100px">
            <Columns>
                <RadzenDataGridColumn Title="@local["Name"]">
                    <Template Context="tstatus">
                        @tstatus.parentTrack.name
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="@local["Opened"]">
                    <Template Context="tstatus">
                        <RadzenCheckBox @bind-Value=tstatus.opened />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="@local["SnowCover"]">
                    <Template Context="tstatus">
                        <RadzenNumeric @bind-Value=tstatus.snowCover />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="@local["OpeningTime"]">
                    <Template Context="tstatus">
                        <RadzenDatePicker @bind-Value=@tstatus.openingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="@local["ClosingTime"]">
                    <Template Context="tstatus">
                        <RadzenDatePicker @bind-Value=@tstatus.closingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenDataGrid Data="statusSheetDto.liftStatuses" TItem="LiftStatus" AllowColumnResize="true" ColumnWidth="100px">
            <Columns>
                <RadzenDataGridColumn Title="@local["Name"]">
                    <Template Context="lstatus">
                        @lstatus.parentLift.name
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="@local["Opened"]">
                    <Template Context="lstatus">
                        <RadzenCheckBox @bind-Value=lstatus.opened />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="@local["OpeningTime"]">
                    <Template Context="lstatus">
                        <RadzenDatePicker @bind-Value=@lstatus.openingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="@local["ClosingTime"]">
                    <Template Context="lstatus">
                        <RadzenDatePicker @bind-Value=@lstatus.closingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenCheckBox Name="prVf" @bind-Value=statusSheetDto.productionVersion />
        <RadzenLabel Component="prVf">@local["ActivateStatusOnSubmit"]</RadzenLabel>

        <RadzenButton ButtonType="ButtonType.Submit" Text="@local["Save"]" />
    </RadzenTemplateForm>
}
else
{
    <p>@local["SelectResortFirst"]</p>
}

@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService
@implements IDisposable
@code {
    [CascadingParameter]
    private Resort? selectedResort { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private Resort? resortData { get; set; } = null;

    private StatusSheet? statusSheetDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(statusSheetDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(statusSheetDto, context, results, true);

        if (isValid)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                dialogService.Open<_LoadingTaskDialog>(
                   "", new Dictionary<string, object>() { { "displayMessage", local["EditingData"] } },
                       new DialogOptions() { CloseDialogOnEsc = false, ShowClose = false });

                try
                {
                    var rstatus = statusSheetDto.resortStatus ?? new ResortStatus
                        {
                            id = Guid.NewGuid(),
                            opened = false,
                            openingTime = TimeOnly.FromDateTime(DateTime.Now),
                            closingTime = TimeOnly.FromDateTime(DateTime.Now),
                            statusSheetId = statusSheetDto.id,
                            parentResortId = statusSheetDto.resortId
                        };

                    var tstatuses = new List<TrackStatus>();
                    var lstatuses = new List<LiftStatus>();
                    foreach (var tstatus in statusSheetDto.trackStatuses)
                    {
                        tstatuses.Add(new()
                            {
                                id = Guid.NewGuid(),
                                opened = tstatus.opened,
                                snowCover = tstatus.snowCover,
                                openingTime = tstatus.openingTime,
                                closingTime = tstatus.closingTime,
                                parentTrackId = tstatus.parentTrackId,
                                statusSheetId = tstatus.statusSheetId
                            });
                    }
                    foreach (var lstatus in statusSheetDto.liftStatuses)
                    {
                        lstatuses.Add(new()
                            {
                                id = Guid.NewGuid(),
                                opened = lstatus.opened,
                                openingTime = lstatus.openingTime,
                                closingTime = lstatus.closingTime,
                                parentLiftId = lstatus.parentLiftId,
                                statusSheetId = lstatus.statusSheetId
                            });
                    }

                    var sheet = new StatusSheet()
                        {
                            id = Guid.NewGuid(),
                            productionVersion = statusSheetDto.productionVersion,
                            dateTime = DateTime.Now,
                            resortId = statusSheetDto.resortId,
                            resortStatus = rstatus,
                            liftStatuses = lstatuses,
                            trackStatuses = tstatuses
                        };

                    database.statusSheets.Add(sheet);

                    await database.SaveChangesAsync();
                    await Task.Delay(2000);
                    dialogService.Close();

                }
                catch (Exception ex)
                {
                    error = true;
                    dialogService.Close();
                    Console.WriteLine($"Error: {ex.Message}");
                }
            }
        }
        else
            error = true;

        var notifMessage = new NotificationMessage();
        if (!error)
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = local["UpdatedDataSuccessfully"],
                    Duration = 3000
                };
        }
        else
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = local["ErrorWhileExecutingRequest"],
                    Duration = 3000
                };
        }
        notificationService.Notify(notifMessage);
        // navigationManager.NavigateTo("/resort/status");
    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                statusSheetDto = await database.statusSheets
                                    .OrderByDescending(e => e.dateTime)
                                    .Include(e => e.trackStatuses)
                                    .ThenInclude(e => e.parentTrack)
                                    .Include(e => e.liftStatuses)
                                    .ThenInclude(e => e.parentLift)
                                    .Include(e => e.resortStatus)
                                    .ThenInclude(e => e.parentResort)
                                    .AsSplitQuery()
                                    .AsNoTracking()
                                    .FirstOrDefaultAsync(e => e.resortId == selectedResort.id && e.productionVersion == true);
            }
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
