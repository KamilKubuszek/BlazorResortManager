@inject IDbContextFactory<ApplicationDbContext> contextFactory
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/resort/status"

<h3>Statuses</h3>

@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject DialogService DialogService
@inject ContextMenuService contextMenuService
@inject NavigationManager navigationManager
@inject ResortChangeManager resortChangeManager
@implements IDisposable
@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    private Resort resortData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                resortData = selectedResort;
                resortData.statusSheets = await database.statusSheets
                                                .Where(e => e.resortId == selectedResort.id)
                                                .Include(e => e.resortStatus)
                                                .Include(e => e.trackStatuses)
                                                .ThenInclude(e => e.parentTrack)
                                                .Include(e => e.liftStatuses)
                                                .ThenInclude(e => e.parentLift)
                                                .AsSplitQuery()
                                                .AsNoTracking()
                                                .ToListAsync();
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }

}
