@inject IDbContextFactory<ApplicationDbContext> contextFactory
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/resort/status"

<h3>Statuses</h3>
<_ResortSidebar />
@if (loading)
{
    <div>loading... </div>
}
else
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Home" />
        <RadzenBreadCrumbItem Text="Statuses" />
    </RadzenBreadCrumb>

    @if (resorts != null)
    {
        <RadzenDropDown Change="@setResort" Data=@resorts TValue="string" TextProperty="name" ValueProperty="id"
                        AllowFiltering="true" Name="DropDownResorts">
        </RadzenDropDown>
    }
    if(selectedResortId != null)
    {
        <a href="@("https://localhost:7007/statuses/update/"+selectedResortId)">update this resorts status</a>
    }
    if (statusSheets != null)
    {
        <RadzenDataGrid Data="@statusSheets" TItem="StatusSheet">
            <Columns>
                <RadzenDataGridColumn TItem="StatusSheet" Property="dateTime" Title="datetime" />
                <RadzenDataGridColumn TItem="StatusSheet" Property="productionVersion" Title="production version" />
            </Columns>
        </RadzenDataGrid>
    }
}

@code {
    public Resort[]? resorts { get; set; }
    public Guid? selectedResortId { get; set; }

    public StatusSheet[]? statusSheets { get; set; }

    public bool loading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await Task.Run(loadResortData);

        loading = false;
    }

    protected async Task loadResortData()
    {
        using (var database = contextFactory.CreateDbContext())
        {
            resorts = await database.resorts
            //.Select(e => new Resort{ id = e.id })
            //.AsNoTracking()
            .ToArrayAsync();
        }
        //Console.WriteLine("dataloaded");
    }

    protected async Task setResort(object value)
    {
        selectedResortId = (Guid)value;
        Console.WriteLine($"Resort changed to {value}");

        using (var database = contextFactory.CreateDbContext())
        {
            statusSheets = await database.statusSheets
            .Where(e => e.resortId == selectedResortId && e.productionVersion == true)
            .OrderByDescending(e => e.dateTime)
            .IgnoreAutoIncludes()
            .ToArrayAsync();

        }
    }

}
