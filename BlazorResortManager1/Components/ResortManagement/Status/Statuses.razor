@inject IDbContextFactory<ApplicationDbContext> contextFactory
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/resort/status"

<h3 class="text-3xl font-bold">Statuses</h3>
@if(resortData is not null)
{
                        <RadzenRow JustifyContent="JustifyContent.Right" Gap="0.5rem">
        <RadzenColumn Size="3">

        </RadzenColumn>
        <RadzenColumn Size="3">

        </RadzenColumn>
        <RadzenColumn Size="3">

        </RadzenColumn>
    </RadzenRow>
    <RadzenStack>
        <RadzenRow JustifyContent="JustifyContent.Right">
            <RadzenColumn Size="12">
                @{
                    var enableButtons = SelectedSheets?.Any();
                    StatusSheet? sheet = null;
                    if(enableButtons == true)
                        sheet = SelectedSheets[0];
                }
                <RadzenStack JustifyContent="JustifyContent.Right" Orientation="Orientation.Horizontal" Gap="0.5rem" Style="width: 100%;">
                    <RadzenButton Style="width: 15%" Text="add new status" Click="addNewSheet" />
                    <RadzenButton Text="activate"
                                  Click="() => switchSheetVersion(true)"
                                  Variant="@(sheet?.productionVersion == true ? Variant.Text : Variant.Outlined)"
                                  Disabled="@(enableButtons is null || sheet?.productionVersion == true)"
                                  Style="width: 15%;" />
                    <RadzenButton Text="deactivate"
                                  Click="() => switchSheetVersion(false)"
                                  Variant="@(sheet?.productionVersion == false ? Variant.Text : Variant.Outlined)"
                                  Disabled="@(enableButtons is null || sheet?.productionVersion == false)"
                                  Style="width: 15%;" />
                    <RadzenButton Text="delete"
                                  Disabled="@(enableButtons is null)"
                                  Click="deleteSheet"
                                  Style="width: 15%;" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.SpaceEvenly">
            <RadzenColumn Size="12" SizeMD="6" Style="padding-right: 0.5rem;">
                <RadzenDataGrid Data="resortData.statusSheets" TItem="StatusSheet"
                                SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedSheets>
                    <Columns>
                        <RadzenDataGridColumn Property="productionVersion" Title="active" TextAlign="TextAlign.Center">
                            <Template Context="sheet">
                                <RadzenIcon Icon="@(sheet.productionVersion ? "Check_Circle" : "Cancel")" IconColor="@(sheet.productionVersion ? Colors.Success : Colors.Danger)" />
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Property="datetime" Title="Date and time" TextAlign="TextAlign.Center">
                            <Template Context="sheet">
                                @(sheet.dateTime.Date + sheet.dateTime.TimeOfDay)
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="6" Style="padding-left: 0.5rem;">
                <RadzenCard Style="width: 100%; height: 100%; " class="rz-shadow-6">
                @if (SelectedSheets?.Any() == true)
                {
                    var sheet = SelectedSheets[0];
                    
                    <_StatusCard sheet="sheet"/>
                }
                else
                {
                    <p>select status to see details</p>
                }
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>

   
}

@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject DialogService dialogService
@inject NotificationService notificationService
@inject ContextMenuService contextMenuService
@inject NavigationManager navigationManager
@inject ResortChangeManager resortChangeManager
@implements IDisposable
@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    private Resort resortData { get; set; }
   // private IEnumerable<StatusSheet> qSheet { get; set; }

    private IList<StatusSheet> SelectedSheets;

    protected override async Task OnInitializedAsync()
    {
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private void addNewSheet()
    {
        navigationManager.NavigateTo("/resort/status/add");
    }

    private void switchSheetVersion(bool switcher)
    {
        var sheet = SelectedSheets[0];
        bool error = false;
        sheet.productionVersion = switcher;
        try
        {
            using (var database = contextFactory.CreateDbContext())
            {

                database.Attach(sheet);
                database.Entry(sheet).State = EntityState.Modified;
                database.SaveChanges();
            }
        }
        catch
        {
            error = true;
        }

        var notifMessage = new NotificationMessage();
        if (!error)
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Edited data successfully!",
                    Duration = 3000
                };
        }
        else
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "There was an error while executing the request",
                    Duration = 3000
                };
        }
        notificationService.Notify(notifMessage);
    }

    private async Task deleteSheet()
    {
        var result = await dialogService.OpenAsync<_ConfirmDialog>(
            "Confirm action", new Dictionary<string, object>() { },
            new DialogOptions() { ShowClose = false });

        if (result == true)
        {
            var sheet = SelectedSheets[0];
            bool error = false;
            try
            {
                if (SelectedSheets?.Any() == true)
                {
                    SelectedSheets.Clear();
                }
                using (var database = contextFactory.CreateDbContext())
                {
                    foreach (var tstatus in sheet.trackStatuses)
                    {
                        database.Remove(tstatus);
                    }

                    foreach (var lstatus in sheet.liftStatuses)
                    {
                        database.Remove(lstatus);
                    }

                    var rstatus = sheet.resortStatus;
                    if (rstatus is not null)
                    {
                        database.Remove(rstatus);
                    }

                    database.Remove(sheet);

                    database.SaveChanges();
                }

            }
            catch
            {
                error = true;
            }

            var notifMessage = new NotificationMessage();
            if (!error)
            {
                notifMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Deleted data successfully!",
                        Duration = 3000
                    };
            }
            else
            {
                notifMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "There was an error while executing the request",
                        Duration = 3000
                    };
            }
            notificationService.Notify(notifMessage);
            updateData();
        }

    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            if (SelectedSheets?.Any() == true)
            {
                SelectedSheets.Clear();
            }

            using (var database = contextFactory.CreateDbContext())
            {
                resortData = selectedResort;
                resortData.statusSheets = await database.statusSheets
                                                .Where(e => e.resortId == selectedResort.id)
                                                .OrderByDescending(e => e.dateTime)
                                                .Include(e => e.resortStatus)
                                                .Include(e => e.trackStatuses)
                                                .ThenInclude(e => e.parentTrack)
                                                .Include(e => e.liftStatuses)
                                                .ThenInclude(e => e.parentLift)
                                                .AsSplitQuery()
                                                .AsNoTracking()
                                                .ToListAsync();
                // qSheet = database.statusSheets
                //             .Where(e => e.resortId == selectedResort.id)
                //             .OrderByDescending(e => e.dateTime)
                //             .Include(e => e.resortStatus)
                //             .Include(e => e.trackStatuses)
                //             .ThenInclude(e => e.parentTrack)
                //             .Include(e => e.liftStatuses)
                //             .ThenInclude(e => e.parentLift)
                //             .AsSplitQuery()
                //             .AsNoTracking();

                                                
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }

}
