@page "/resort/status"
@attribute [Authorize]

@inject IStringLocalizer<AppLanguage> local
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject DialogService dialogService
@inject NotificationService notificationService
@inject ContextMenuService contextMenuService
@inject NavigationManager navigationManager
@inject ResortChangeManager resortChangeManager

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h3 class="text-3xl font-bold">@local["Statuses"]</h3>
@if (resortData is not null)
{
    <RadzenRow JustifyContent="JustifyContent.Right" Gap="0.5rem">
        <RadzenColumn Size="3"></RadzenColumn>
        <RadzenColumn Size="3"></RadzenColumn>
        <RadzenColumn Size="3"></RadzenColumn>
    </RadzenRow>
    <RadzenStack>
        <RadzenRow JustifyContent="JustifyContent.Right">
            <RadzenColumn Size="12">
                @{
                    var enableButtons = selectedSheet is not null;
                    StatusSheet? sheet = null;
                    if (enableButtons == true)
                        sheet = selectedSheet;
                }
                <RadzenStack JustifyContent="JustifyContent.Right" Orientation="Orientation.Horizontal" Gap="0.5rem" Style="width: 100%;">
                    <RadzenButton Style="width: 15%" Text="@local["Add new status"]" Click="addNewSheet" />
                    <RadzenButton Text="@local["Activate"]"
                                  Click="() => switchSheetVersion(true)"
                                  Variant="@(sheet?.productionVersion == true ? Variant.Text : Variant.Outlined)"
                                  Disabled="@(enableButtons is false || sheet?.productionVersion == true)"
                                  Style="width: 15%;" />
                    <RadzenButton Text="@local["Deactivate"]"
                                  Click="() => switchSheetVersion(false)"
                                  Variant="@(sheet?.productionVersion == false ? Variant.Text : Variant.Outlined)"
                                  Disabled="@(enableButtons is false || sheet?.productionVersion == false)"
                                  Style="width: 15%;" />
                    <RadzenButton Text="@local["Delete"]"
                                  Disabled="@(enableButtons is false)"
                                  Click="deleteSheet"
                                  Style="width: 15%;"
                                  Icon="Delete" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.SpaceEvenly">
            <RadzenColumn Size="12" SizeMD="6" Style="padding-right: 0.5rem;">
                <RadzenDataGrid Data="resortData.statusSheets" TItem="StatusSheet"
                                SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedSheets IsLoading="loadingGrid" RowClick="(args) => fetchDataForSheet(args)">
                    <Columns>
                        <RadzenDataGridColumn Property="productionVersion" Title="@local["Active"]" TextAlign="TextAlign.Center">
                            <Template Context="sheet">
                                <RadzenIcon Icon="@(sheet.productionVersion ? "Check_Circle" : "Cancel")" IconColor="@(sheet.productionVersion ? Colors.Success : Colors.Danger)" />
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Property="datetime" Title="@local["Date and time"]" TextAlign="TextAlign.Center">
                            <Template Context="sheet">
                                @(sheet.dateTime.Date + sheet.dateTime.TimeOfDay)
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="6" Style="padding-left: 0.5rem;">
                <RadzenCard Style="width: 100%; height: 100%;" class="rz-shadow-6">
                    @if (selectedSheet is not null)
                    {
                        <_StatusCard sheet="selectedSheet" />
                    }
                    else
                    {
                        <p>@local["Select status to see details"]</p>
                    }
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
}

@implements IDisposable
@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    private Resort resortData { get; set; }
    private IList<StatusSheet> SelectedSheets;
    private StatusSheet? selectedSheet { get; set; } = null;
    private bool loadingGrid = false;

    protected override async Task OnInitializedAsync()
    {
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private void addNewSheet()
    {
        navigationManager.NavigateTo("/resort/status/add");
    }

    private void switchSheetVersion(bool switcher)
    {
        bool error = false;

        try
        {
            selectedSheet.productionVersion = switcher;
            using (var database = contextFactory.CreateDbContext())
            {
                database.Attach(selectedSheet);
                database.Entry(selectedSheet).State = EntityState.Modified;
                database.SaveChanges();
            }
            resortData.statusSheets.FirstOrDefault(e => e.id == selectedSheet.id).productionVersion = switcher;
        }
        catch
        {
            selectedSheet = null;
            error = true;
        }

        var notifMessage = new NotificationMessage();
        if (!error)
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = local["Edited data successfully!"],
                    Duration = 3000
                };
        }
        else
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = local["There was an error while executing the request"],
                    Duration = 3000
                };
        }
        notificationService.Notify(notifMessage);
    }

    private async Task deleteSheet()
    {
        var result = await dialogService.OpenAsync<_ConfirmDialog>(
            local["Confirm action"], new Dictionary<string, object>() { },
            new DialogOptions() { ShowClose = false });

        if (result == true)
        {
            var sheet = selectedSheet;
            bool error = false;
            try
            {
                using (var database = contextFactory.CreateDbContext())
                {
                    foreach (var tstatus in sheet.trackStatuses)
                    {
                        database.Remove(tstatus);
                    }

                    foreach (var lstatus in sheet.liftStatuses)
                    {
                        database.Remove(lstatus);
                    }

                    var rstatus = sheet.resortStatus;
                    if (rstatus is not null)
                    {
                        database.Remove(rstatus);
                    }

                    database.Remove(sheet);
                    database.SaveChanges();
                }

            }
            catch
            {
                error = true;
            }

            var notifMessage = new NotificationMessage();
            if (!error)
            {
                notifMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = local["Deleted data successfully!"],
                        Duration = 3000
                    };
            }
            else
            {
                notifMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = local["There was an error while executing the request"],
                        Duration = 3000
                    };
            }
            notificationService.Notify(notifMessage);
            updateData();
        }
    }

    private void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            selectedSheet = null;

            using (var database = contextFactory.CreateDbContext())
            {
                loadingGrid = true;
                resortData = selectedResort;
                resortData.statusSheets = database.statusSheets
                                                .Where(e => e.resortId == selectedResort.id)
                                                .OrderByDescending(e => e.dateTime)
                                                .AsNoTracking()
                                                .ToList();
                loadingGrid = false;
            }
            StateHasChanged();
        }
    }

    private void fetchDataForSheet(DataGridRowMouseEventArgs<StatusSheet> args)
    {
        using (var database = contextFactory.CreateDbContext())
        {
            selectedSheet = database.statusSheets
                                    .Where(e => e.resortId == selectedResort.id)
                                    .OrderByDescending(e => e.dateTime)
                                    .Include(e => e.resortStatus)
                                    .Include(e => e.trackStatuses)
                                    .ThenInclude(e => e.parentTrack)
                                    .Include(e => e.liftStatuses)
                                    .ThenInclude(e => e.parentLift)
                                    .AsSplitQuery()
                                    .AsNoTracking()
                                    .FirstOrDefault(e => e.id == args.Data.id);
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
