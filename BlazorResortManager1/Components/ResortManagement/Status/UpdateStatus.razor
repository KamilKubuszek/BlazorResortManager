@* @inject HttpContext httpContext *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject DialogService DialogService

@page "/resort/status/update/{currentResortIdParameter?}"

<h3>UpdateStatus</h3>
<_ResortSidebar />
@if (loading)
{
    <div>loading...</div>
}
else
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Home" />
        <RadzenBreadCrumbItem Path="/statuses" Text="Statuses" />
        <RadzenBreadCrumbItem Icon="add" Text="Update" />
    </RadzenBreadCrumb>

    @if (resorts != null && currentResortIdParameter == null)
    {
        <RadzenDropDown 
            Change="@setStatusForm" Data=@resorts TValue="Guid" TextProperty="name" ValueProperty="id"
            @bind-Value="dropdownSelectedResortId" AllowFiltering="true" Name="DropDownResorts">
        </RadzenDropDown>
    }
    @if (currentStatusSheet != null)
    {
        <RadzenTemplateForm Submit="@(async (StatusSheet args) => {await postStatusSheet(args); })" Method="post" TItem="StatusSheet" Data="currentStatusSheet">
@*             <RadzenFieldset Text="Resort">
                <p>
                    <RadzenCheckBox @bind-Value=@currentStatusSheet.resortStatus.opened Name="CheckboxS_opened" />
                    <RadzenLabel Text="opened" Component="CheckboxS_opened" />
                </p>
            </RadzenFieldset> *@

            <RadzenFieldset Text="Tracks">
                @foreach (TrackStatus trackStatus in currentStatusSheet.trackStatuses)
                {
                    @* <RadzenFieldset Text="@trackStatus.parentTrack.name"> *@
                        @* <p>
                            <RadzenCheckBox @bind-Value=@trackStatus.opened Name="Checkbox_opened" />
                            <RadzenLabel Text="opened" Component="CheckboxT_opened" />
                        </p>

                        <p>
                            <RadzenCheckBox @bind-Value=@trackStatus.illuminated Name="Checkbox_illuminated" />
                            <RadzenLabel Text="illuminated" Component="CheckboxT_illuminated" />
                        </p>

                        <p>
                            <RadzenCheckBox @bind-Value=@trackStatus.snowGroomed Name="Checkbox_snowGroomed" />
                            <RadzenLabel Text="snow groomed" Component="CheckboxT_snowGroomed" />
                        </p> *@
                    @* </RadzenFieldset> *@
                }
            </RadzenFieldset>

            <RadzenFieldset Text="Lifts">
                @foreach (LiftStatus liftStatus in currentStatusSheet.liftStatuses)
                {
                    @* <RadzenFieldset Text="@liftStatus.parentLift.name"> *@
                        <p>
                            <RadzenCheckBox @bind-Value=@liftStatus.opened Name="CheckboxL_opened" />
                            <RadzenLabel Text="opened" Component="CheckboxL_opened" />
                        </p>
                    @* </RadzenFieldset> *@
                }
            </RadzenFieldset>

            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </RadzenTemplateForm>
    }

}


@code {
    [Parameter]
    public string? currentResortIdParameter { get; set; }

    public Resort[]? resorts;
    private Guid dropdownSelectedResortId;
    private Resort? selectedResort;
    private StatusSheet? currentStatusSheet;

    public bool loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await Task.Run(loadResortData);
        loading = false;

    }

    protected async Task setStatusForm()
    {
        loading = true;
        selectedResort = resorts.FirstOrDefault(e => e.id == dropdownSelectedResortId);

        using (var database = contextFactory.CreateDbContext())
        {
            currentStatusSheet = await database.statusSheets
                .Where(e => e.resortId == dropdownSelectedResortId && e.productionVersion == true)
                .OrderByDescending(e => e.dateTime)
                .Include(e => e.resortStatus)
                .Include(e => e.liftStatuses)
                // .Select( e => new StatusSheet
                // {
                //     liftStatuses = new LiftStatus
                //     {
                //         parentLift = new Lift
                //         {
                //             name = e.liftStatuses.
                //         }
                //     }
                // })
                .Include(e => e.trackStatuses)
                // .Select(e => e.parentTrack.name))
                .AsSplitQuery()
                .IgnoreAutoIncludes()
                .FirstOrDefaultAsync();
        }
        loading = false;
        //currentStatusSheet = statusesByResortId[selectedResortId];
        Console.Write(System.Text.Json.JsonSerializer.Serialize(currentStatusSheet, new System.Text.Json.JsonSerializerOptions()
        {
            WriteIndented = true,
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles
        }));

    }

    protected async Task loadResortData()
    {
        using (var database = contextFactory.CreateDbContext())
        {
            resorts = await database.resorts.AsNoTracking().AsSplitQuery().ToArrayAsync();          
        }
        // if(currentResortIdParameter != null && statusesByResortId.Count() > 0)
        // {
        //     currentStatusSheet = statusesByResortId[new Guid(currentResortIdParameter)];
        // }
    }

    protected async Task postStatusSheet(StatusSheet statusSheet)
    {
        var postStatus = async () =>
        {
            Console.WriteLine("updating... ");

            //loading = true;

            statusSheet.id = Guid.NewGuid();
            statusSheet.dateTime = DateTime.Now;
            statusSheet.resort = null;

            statusSheet.resortStatus.id = Guid.NewGuid();

            foreach (TrackStatus trackStatus in statusSheet.trackStatuses)
            {
                trackStatus.id = Guid.NewGuid();
            }

            foreach (LiftStatus liftStatus in statusSheet.liftStatuses)
            {
                liftStatus.id = Guid.NewGuid();
            }

            using (var database = contextFactory.CreateDbContext())
            {
                await database.statusSheets.AddAsync(statusSheet);
                await database.SaveChangesAsync();
            }
            Console.WriteLine("Status updated: ");
            // Console.Write(JsonSerializer.Serialize(statusSheet, new JsonSerializerOptions()
            // {
            //     WriteIndented = true,
            //     ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles
            // }));

        };

        InvokeAsync(async () =>
        {
            await postStatus();
            await Task.Delay(2000);
            DialogService.Close();
        });
        var dialog = await DialogService.OpenAsync<_LoadingTaskDialog>("",
           new Dictionary<string, object>() { { "displayMessage", "LoAdInG." } },
           new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });

       // loading = false;
    }

}
    


