@page "/resort/camera"
@attribute [Authorize]

@inject IStringLocalizer<AppLanguage> local
@inject ResortChangeManager resortChangeManager
@inject NotificationService notificationService
@inject DialogService dialogService
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NavigationManager navigationManager

<h3 class="text-3xl font-bold">@local["Cameras"]</h3>
@* <RadzenLink Path="/resort/camera/add" Text="@local["Add Camera"]" /> *@

@if (resortData is not null)
{
    <RadzenStack>
    <RadzenRow JustifyContent="JustifyContent.Right">
        <RadzenColumn SizeMD="6" Size="12">
            <RadzenCard Style="width: 100%; height: fit-content; padding: 0.5rem;">
                <RadzenStack JustifyContent="JustifyContent.SpaceEvenly" Orientation="Orientation.Horizontal" Gap="0.5rem">
                    <RadzenButton Text="@local["Add"]" Click="@(() => navigationManager.NavigateTo("/resort/camera/add") )" />
                    <RadzenButton Text="@local["Edit"]" Click="@(() => navigationManager.NavigateTo("resort/camera/edit/"+selectedCameras[0].id))" Icon="Edit_Note" Variant="Variant.Outlined" Disabled="@(selectedCameras?.Any() == true ? false : true)" />
                    <RadzenButton Text="@local["Delete"]" Click="deleteCamera" Icon="Delete" Variant="Variant.Outlined" Disabled="@(selectedCameras?.Any() == true ? false : true)" ButtonStyle="ButtonStyle.Danger" />
                </RadzenStack>
            </RadzenCard>

        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard>
                <RadzenDataGrid Data="resortData.cameras" TItem="Camera"
                                SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedCameras>
                    <Columns>
                        <RadzenDataGridColumn TItem="Camera" Property="name" Title="@local["Name"]" Width="100px">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Camera" Property="link" Title="@local["URL"]" Width="100px">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Camera" Property="description" Title="@local["Description"]" Width="100px">
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>

            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard Style="width: 100%; height: 40vh; padding: 0.5rem;">
                @if (selectedCameras?.Any() == true)
                {
                    <iframe src="@selectedCameras[0].link" style="width: 100%; height: calc(40vh - 1rem);"></iframe>
                }
                else
                {
                    <p>@local["Select camera to see the preview"]</p>
                }
            </RadzenCard> 
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn><h3 class="text-3xl font-bold">@local["Binds"]</h3>
            <p>@local["Here are objects and cameras from which they can be seen"]</p>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="6">
            @if (trackBinding is not null)
            {
                <h2 class="text-2xl font-bold">@local["Tracks"]</h2>
                <RadzenDataList WrapItems="true" AllowPaging="true" PageSize="2" Data="trackBinding" TItem="IGrouping<string, CameraTrackBinding>">
                    <Template Context="group">
                        <RadzenCard Style="width: 25%; height: 20vh; text-align:center">
                            <RadzenRow>
                                <RadzenColumn>@group.Key <hr /></RadzenColumn>
                                    
                            </RadzenRow>
                            @foreach (var bind in group)
                            {
                                <RadzenRow>
                                    <RadzenColumn>@bind.camera.name</RadzenColumn>
                                </RadzenRow>
                            }
                                
                                
                                @* @{
                                    var count = 0;
                                }
                                @foreach (var bind in group)
                                {
                                    @if (count == 0)
                                    {
                                        @(bind.camera.name)
                                    }
                                    else
                                    {
                                        @(", " + bind.camera.name)
                                    }
                                    count++;
                                } *@
                                
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            }
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            @if (liftBinding is not null)
            {
                <h2 class="text-2xl font-bold">@local["Lifts"]</h2>
                <RadzenDataList WrapItems="true" AllowPaging="true" PageSize="2" Data="@liftBinding" TItem="IGrouping<string, CameraLiftBinding>">
                    <Template Context="group">
                        <RadzenCard Style="width: 25%; height: 20vh; text-align:center">
                            <RadzenRow>
                                <RadzenColumn>@group.Key <hr /></RadzenColumn>

                            </RadzenRow>
                            @foreach (var bind in group)
                            {
                                <RadzenRow>
                                    <RadzenColumn>@bind.camera.name</RadzenColumn>
                                </RadzenRow>
                            }


                            @* @{
                    var count = 0;
                    }
                    @foreach (var bind in group)
                    {
                    @if (count == 0)
                    {
                    @(bind.camera.name)
                    }
                    else
                    {
                    @(", " + bind.camera.name)
                    }
                    count++;
                    } *@

                        </RadzenCard>
                    </Template>
                </RadzenDataList>  
            }
        </RadzenColumn>
    </RadzenRow>
    </RadzenStack>
}

@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    private Resort resortData { get; set; }

    private IList<Camera> selectedCameras;

    private IEnumerable<IGrouping<string, CameraTrackBinding>>? trackBinding = null;
    private IEnumerable<IGrouping<string, CameraLiftBinding>>? liftBinding = null;

    protected override async Task OnInitializedAsync()
    {
        resortChangeManager.ResortChange += updateData;
        updateData();
    }

    private async Task deleteCamera()
    {
        var result = await dialogService.OpenAsync<_ConfirmDialog>(
            "Confirm", new Dictionary<string, object>() { },
            new DialogOptions() { ShowClose = false });

        if (result == true)
        {
            bool error = false;
            try
            {
                var camera = selectedCameras[0];

                if (selectedCameras?.Any() == true)
                {
                    selectedCameras.Clear();
                }
                else throw new Exception();

                using (var database = contextFactory.CreateDbContext())
                {
                    var cameraBindingsL = await database.cameraLiftBindings.Where(e => e.cameraId == camera.id).ToArrayAsync();
                    foreach (var bind in cameraBindingsL)
                    {
                        database.cameraLiftBindings.Remove(bind);
                    }
                    var cameraBindingsT = await database.cameraTrackBindings.Where(e => e.cameraId == camera.id).ToArrayAsync();

                    foreach (var bind in cameraBindingsT)
                    {
                        database.cameraTrackBindings.Remove(bind);
                    }
                    
                    database.Remove(camera);

                    database.SaveChanges();
                }
            }
            catch
            {
                dialogService.Close();
                error = true;
            }

            var notifMessage = new NotificationMessage();
            if (!error)
            {
                notifMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = @local["Deleted data successfuly!"],
                        Duration = 3000
                    };
            }
            else
            {
                notifMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = @local["There was an error while executing the request"],
                        Duration = 3000
                    };
            }
            notificationService.Notify(notifMessage);
            updateData();
        }
    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                resortData = selectedResort;

                resortData.tracks = await database.tracks.Where(e => e.resortId == selectedResort.id)
                    .Select(e =>
                        new Track
                            {
                                id = e.id,
                                resortId = e.resortId
                            })
                    .ToListAsync();

                resortData.lifts = await database.lifts.Where(e => e.resortId == selectedResort.id)
                    .Select(e =>
                        new Lift
                            {
                                id = e.id,
                                resortId = e.resortId
                            })
                    .ToListAsync();

                resortData.cameras = await database.cameras.Where(e => e.resortId == selectedResort.id).ToListAsync();

                var tBind = await database.cameraTrackBindings
                                .Where(e => resortData.tracks.Contains(e.track) && resortData.cameras.Contains(e.camera))
                                .Include(e => e.track)
                                .Include(e => e.camera)
                                .ToArrayAsync();

                var lBind = await database.cameraLiftBindings
                                .Where(e => resortData.lifts.Contains(e.lift) && resortData.cameras.Contains(e.camera))
                                .Include(e => e.lift)
                                .Include(e => e.camera)
                                .ToArrayAsync();

                trackBinding = tBind.GroupBy(e => e.track.name);
                liftBinding = lBind.GroupBy(e => e.lift.name);
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
