@page "/resort/camera"
@attribute [Authorize]

<h3 class="text-3xl font-bold">Cameras</h3>
<RadzenLink Path="/resort/camera/add" Text="add camera"/>
@if(resortData is not null)
{
    <RadzenRow>
        <RadzenColumn>
            <RadzenDataGrid Data="resortData.cameras" TItem="Camera"
                            SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedCameras>
                <Columns>
                    <RadzenDataGridColumn TItem="Camera" Property="name" Title="Name" Width="100px">

                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Camera" Property="link" Title="url" Width="100px">

                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
        <RadzenColumn>
            @if (selectedCameras?.Any() == true)
            {
                <iframe src="@selectedCameras[0].link" style="width: 100%; height: 40vh;"></iframe>
            }
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn>

        </RadzenColumn>
    </RadzenRow>

    @if(trackBinding is not null)
    {
        <RadzenStack Style="width: 100%; margin-bottom: 0.5rem; margin-top: 0.5rem;" Orientation="Orientation.Horizontal" Gap="0.5rem" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        @foreach (var group in trackBinding)
        {
            <RadzenCard Style="width: 20%; text-align:center" >
                <p>@group.Key</p>
                <hr />
                <p>
                @{ var count = 0;}
                @foreach (var bind in group)
                {
                    @if(count == 0){
                         @(bind.camera.name)
                    }
                    else
                    {
                         @(", "+bind.camera.name)
                    }
                    count++;
                }
                </p>
            </RadzenCard>
        }
        </RadzenStack>
    }

    @if (liftBinding is not null)
    {
        <RadzenStack Style="width: 100%; margin-bottom: 0.5rem" Orientation="Orientation.Horizontal" Gap="0.5rem" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        @foreach (var group in liftBinding)
        {
            <RadzenCard Style="width: 20%; text-align:center">
                <p>@group.Key</p>
                <hr />
                <p>
                    @{
                        var count = 0;
                    }
                    @foreach (var bind in group)
                    {
                        @if (count == 0)
                        {
                            @(bind.camera.name)
                        }
                        else
                        {
                            @(", " + bind.camera.name)
                        }
                        count++;
                    }
                </p>
            </RadzenCard>
        }
        </RadzenStack>
    }
}


@implements IDisposable
@inject ResortChangeManager resortChangeManager
@inject NotificationService notificationService
@inject DialogService dialogService
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    private Resort resortData { get; set; }

    private IList<Camera> selectedCameras;

    private IEnumerable<IGrouping<string, CameraTrackBinding>>? trackBinding = null;
    private IEnumerable<IGrouping<string, CameraLiftBinding>>? liftBinding = null;
    // private CameraTrackBinding[]? cameraTrackBindings = null;

    protected override async Task OnInitializedAsync()
    {
        resortChangeManager.ResortChange += updateData;
        updateData();
    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if(selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                resortData = selectedResort;

                resortData.tracks = await database.tracks.Where(e => e.resortId == selectedResort.id)
                    .Select(e => 
                        new Track{ 
                            id = e.id, 
                            resortId = e.resortId 
                        })
                        .ToListAsync();

                resortData.lifts = await database.lifts.Where(e => e.resortId == selectedResort.id)
                    .Select(e =>
                        new Lift{
                            id = e.id,
                            resortId = e.resortId
                        })
                    .ToListAsync();

                resortData.cameras = await database.cameras.Where(e => e.resortId == selectedResort.id).ToListAsync();

                var tBind = await database.cameraTrackBindings
                                .Where(e => resortData.tracks.Contains(e.track) && resortData.cameras.Contains(e.camera))
                                .Include(e => e.track)
                                .Include(e => e.camera)
                                .ToArrayAsync();

                var lBind = await database.cameraLiftBindings
                                .Where(e => resortData.lifts.Contains(e.lift) && resortData.cameras.Contains(e.camera))
                                .Include(e => e.lift)
                                .Include(e => e.camera)
                                .ToArrayAsync();

                trackBinding = tBind.GroupBy(e => e.track.name);
                liftBinding = lBind.GroupBy(e => e.lift.name);
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
