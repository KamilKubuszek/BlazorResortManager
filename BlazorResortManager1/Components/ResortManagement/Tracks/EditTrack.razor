@page "/resort/track/edit/{selectedTrackId:guid}"
@attribute [Authorize]
@implements IDisposable
@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer<AppLanguage> local
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService
@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager

<h3 class="text-3xl font-bold">@local["Edit track"]</h3>

@if (trackDto is not null)
{
    <RadzenTemplateForm Data="trackDto" TItem="Track" Submit="submitForm">
        <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenCard>
                        <RadzenFieldset Text="Data">
                            <RadzenStack Gap="1rem">
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="@local["Name"]" Component="name" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox Name="name" @bind-Value="trackDto.name" Style="width: 100%;" />
                                        <RadzenDataAnnotationValidator Component="name" />
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="@local["Marking"]" Component="marking" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox Name="marking" @bind-Value="trackDto.marking" Style="width: 100%;" />
                                        <RadzenDataAnnotationValidator Component="marking" />
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="@local["Difficulty"]" Component="difficulty" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenDropDown Data="difficulties" Multiple="false" @bind-Value="selectedDifficulty" TValue="int" TextProperty="name" ValueProperty="id">
                                            <Template Context="Track">
                                                @local[Track.name]
                                            </Template>
                                        </RadzenDropDown>
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="@local["Inclination"]" Component="inclination" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenNumeric Name="inclination" @bind-Value="trackDto.inclination" Style="width: 100%;" />
                                        @* <RadzenDataAnnotationValidator Component="inclination" /> *@
                                    </RadzenColumn>
                                </RadzenRow>

                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="@local["Length"]" Component="lengthMeters" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenNumeric Name="lengthMeters" @bind-Value="trackDto.lengthMeters" Style="width: 100%;" />
                                        @* <RadzenDataAnnotationValidator Component="lengthMeters" /> *@
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenFieldset>
                    </RadzenCard>
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenCard>
                        <RadzenFieldset Text="@local["Bind cameras"]">
                            <RadzenDropDown Data="cameras" @bind-Value="selectedCamerasIds" Multiple="true" TextProperty="name" ValueProperty="id" Placeholder="@local["Select cameras"]" Style="width: 100%;" />
                        </RadzenFieldset>
                    </RadzenCard>
                </RadzenStack>

            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="@local["Submit changes"]" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@code {
    [Parameter]
    public Guid? selectedTrackId { get; set; }

    private Track? trackDto { get; set; }
    private Camera[] cameras { get; set; } = [];
    private IEnumerable<Guid> selectedCamerasIds { get; set; }

    private TrackDifficulty[] difficulties = [];
    private int selectedDifficulty = 4;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await validateTrackOwnership();
        resortChangeManager.ResortChange += updateForm;

        if (selectedTrackId != null)
        {
            updateForm();
        }
    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(trackDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(trackDto, context, results, true);

        if (isValid)
        {
            dialogService.Open<_LoadingTaskDialog>("",
                new Dictionary<string, object> { { "displayMessage", "Editing data..." } },
                new DialogOptions { CloseDialogOnEsc = false, ShowClose = false }
            );
            trackDto.trackDifficulty = difficulties.FirstOrDefault(e => e.id == selectedDifficulty);


            using (var database = contextFactory.CreateDbContext())
            {
                var cameraBindings = database.cameraTrackBindings.Where(e => e.trackId == trackDto.id).AsNoTracking();
                var bindingsToRemove = new List<CameraTrackBinding>();
                var bindingsToAdd = new List<CameraTrackBinding>();

                foreach (var cameraId in selectedCamerasIds)
                {
                    var bindInDb = cameraBindings.FirstOrDefault(e => e.cameraId == cameraId);

                    if (bindInDb is null)
                    {
                        var newBind = new CameraTrackBinding
                            {
                                id = Guid.NewGuid(),
                                trackId = (Guid)selectedTrackId,
                                cameraId = cameraId
                            };
                        bindingsToAdd.Add(newBind);
                        database.cameraTrackBindings.Add(newBind);
                    }
                }

                foreach (var bindInDb in cameraBindings)
                {
                    var neededBindId = selectedCamerasIds.FirstOrDefault(e => e == bindInDb.cameraId);

                    if (neededBindId == Guid.Empty)
                    {
                        bindingsToRemove.Add(bindInDb);
                        database.cameraTrackBindings.Remove(bindInDb);
                    }
                }

                database.Attach(trackDto);
                database.Entry(trackDto).State = EntityState.Modified;

                try
                {
                    await database.SaveChangesAsync();
                    await Task.Delay(2000);
                    dialogService.Close();
                }
                catch
                {
                    error = true;
                }
            }
        }
        else
        {
            error = true;
        }

        var notifMessage = error
            ? new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = local["There was an error while executing the request"],
                    Duration = 3000
                }
            : new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = local["Edited data successfully!"],
                    Duration = 3000
                };

        notificationService.Notify(notifMessage);

        if (!error)
            navigationManager.NavigateTo("/resort/track");
    }

    private async Task validateTrackOwnership()
    {
        try
        {
            var auth = await authenticationState;
            var userId = auth.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            if (userId is null) throw new Exception("user permit for tracks id was not found");

            using (var database = contextFactory.CreateDbContext())
            {
                var track = await database.tracks.FirstOrDefaultAsync(e => e.id == selectedTrackId);

                if (track is null) throw new Exception("track was not found");

                var permit = await database.permits
                    .FirstOrDefaultAsync(e => e.userId == userId && e.resortId == track.resortId);

                if (permit is null) throw new Exception("user permit for tracks id was not found");
            }
        }
        catch (Exception e)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "You don't have permissions to do this or something went wrong",
                    Duration = 4000
                });
            navigationManager.NavigateTo("/resort");
            Console.WriteLine(e.Message);
        }
    }

    private async void updateForm(ResortChangeEventArgs? eventArgs = null)
    {
        using (var database = contextFactory.CreateDbContext())
        {
            trackDto = await database.tracks.FirstOrDefaultAsync(e => e.id == selectedTrackId);
            cameras = await database.cameras.Where(e => e.resortId == trackDto.resortId).AsNoTracking().ToArrayAsync();
            selectedCamerasIds = await database.cameraTrackBindings
                .Where(e => e.trackId == trackDto.id)
                .AsNoTracking()
                .Select(e => e.cameraId)
                .ToArrayAsync();
            difficulties = await database.trackDifficulties.OrderByDescending(e => e.id).ToArrayAsync();
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateForm;
    }
}
