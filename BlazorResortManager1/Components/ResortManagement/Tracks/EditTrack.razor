@implements IDisposable
@page "/resort/track/edit/{selectedTrackId:guid?}"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations

<h3 class="text-3xl font-bold">Edit Track</h3>
@(selectedTrackId.ToString() ?? "no track")

@if (trackDto is not null)
{
    <RadzenTemplateForm Data="trackDto" TItem="Track" Submit="submitForm">
        <RadzenStack Style="width: 100%">
            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="name"><RadzenTextBox Name="name" @bind-Value="trackDto.name" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="name" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="marking"><RadzenTextBox Name="marking" @bind-Value="trackDto.marking" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="marking" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="difficulty"><RadzenTextBox Name="difficulty" @bind-Value="trackDto.difficulty" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="difficulty" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="inclination"><RadzenNumeric Name="inclination" @bind-Value="trackDto.inclination" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="inclination" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="length"><RadzenNumeric Name="lengthMeters" @bind-Value="trackDto.lengthMeters" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
               @*  <RadzenColumn><RadzenDataAnnotationValidator Component="lengthMeters" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="illuminated"><RadzenCheckBox Name="illuminated" @bind-Value="trackDto.illuminated" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
@*                 <RadzenColumn><RadzenDataAnnotationValidator Component="illuminated" /></RadzenColumn> *@
            </RadzenRow>


            <RadzenDropDown Data="cameras" @bind-Value=@selectedCamerasIds
                            Multiple="true" TextProperty="name" ValueProperty="id"
                            Placeholder="Select cameras" />

            <RadzenButton Text="Submit changes" ButtonType="ButtonType.Submit" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService
@code {
    // [CascadingParameter]
    // private Resort? selectedResort { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public Guid? selectedTrackId { get; set; }

    private Camera[] cameras { get; set; } = [];
    private IEnumerable<Guid> selectedCamerasIds { get; set; }

    private Track? trackDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await validateTrackOwnership();

        resortChangeManager.ResortChange += updateForm;
        if (selectedTrackId != null)
        {
            Console.WriteLine("update form...");
            updateForm();
        }

    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(trackDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(trackDto, context, results, true);

        if (isValid)
        {
            dialogService.Open<_LoadingTaskDialog>(
                "", new Dictionary<string, object>() { { "displayMessage", "editing data..." } },
                    new DialogOptions() { CloseDialogOnEsc = false, ShowClose = false });

            using (var database = contextFactory.CreateDbContext())
            {
                //prepare cameras to
                var cameraBindings = database.cameraTrackBindings.Where(e => e.trackId == trackDto.id).AsNoTracking();
                var bindingsToRemove = new List<CameraTrackBinding>();
                var bindingsToAdd = new List<CameraTrackBinding>();

                foreach (var cameraId in selectedCamerasIds)
                {
                    //check if there is already bind with that camera in database
                    var bindInDb = cameraBindings.FirstOrDefault(e => e.cameraId == cameraId);

                    //if not found, add new bind
                    //if not, there is no need to add second one
                    if (bindInDb is null)
                    {
                        var newBind = new CameraTrackBinding
                            {
                                id = Guid.NewGuid(),
                                trackId = (Guid)selectedTrackId,
                                cameraId = cameraId
                            };
                        bindingsToAdd.Add(newBind);
                        database.cameraTrackBindings.Add(newBind);
                    }
                }
                foreach (var bindInDb in cameraBindings)
                {
                    //find bind from db that is not selected in dropdown
                    var neededBindId = selectedCamerasIds.FirstOrDefault(e => e == bindInDb.cameraId);

                    //if bind was not found, add it to deletion list
                    if (neededBindId == Guid.Empty)
                    {
                        bindingsToRemove.Add(bindInDb);
                        database.cameraTrackBindings.Remove(bindInDb);
                    }
                }

                database.Attach(trackDto);
                database.Entry(trackDto).State = EntityState.Modified;


                try
                {
                    await database.SaveChangesAsync();
                    await Task.Delay(2000);
                    dialogService.Close();
                }
                catch
                {
                    error = true;
                }
            }
        }
        else
            error = true;

        var notifMessage = new NotificationMessage();
        if (!error)
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Edited data successfully!",
                    Duration = 3000
                };
        }
        else
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "There was an error while executing the request",
                    Duration = 3000
                };
        }
        notificationService.Notify(notifMessage);
    }

    private async Task validateTrackOwnership()
    {
        try
        {
            var auth = await authenticationState;
            var userId = auth.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (userId is null)
            {
                throw new Exception("user permit for tracks id was not found");
            }

            using (var database = contextFactory.CreateDbContext())
            {
                var track = await database.tracks.FirstOrDefaultAsync(e => e.id == selectedTrackId);
                if (track is null)
                {
                    throw new Exception("track was not found");
                }

                var permit = await database.permits
                    .FirstOrDefaultAsync(e => e.userId == userId && e.resortId == track.resortId);
                if (permit is null)
                {
                    throw new Exception("user permit for tracks id was not found");
                }
            }
        }
        catch (Exception e)
        {
            var notifMessage = new NotificationMessage();

            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "you dont have permissions to do this or something went wrong",
                    Duration = 4000
                };

            notificationService.Notify(notifMessage);
            navigationManager.NavigateTo("/resort");

            Console.WriteLine(e.Message);
        }
    }

    private async void updateForm(ResortChangeEventArgs? eventArgs = null)
    {
        using (var database = contextFactory.CreateDbContext())
        {
            trackDto = await database.tracks.FirstOrDefaultAsync(e => e.id == selectedTrackId);
            cameras = await database.cameras.Where(e => e.resortId == trackDto.resortId).AsNoTracking().ToArrayAsync();
            selectedCamerasIds = await database.cameraTrackBindings.Where(e => e.trackId == trackDto.id).AsNoTracking().Select(e => e.cameraId).ToArrayAsync();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateForm;
    }
}


