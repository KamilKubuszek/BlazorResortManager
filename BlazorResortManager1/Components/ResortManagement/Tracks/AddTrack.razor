@page "/resort/track/add"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer<AppLanguage> local

<h3 class="text-3xl font-bold">@local["Add Track"]</h3>

@if (trackDto is not null)
{
    <RadzenTemplateForm Data="trackDto" TItem="Track" Submit="submitForm">
        <RadzenStack Style="width: 100%">
            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Name"]"><RadzenTextBox Name="name" @bind-Value="trackDto.name" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="name" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Marking"]"><RadzenTextBox Name="marking" @bind-Value="trackDto.marking" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="marking" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Difficulty"]"><RadzenTextBox Name="difficulty" @bind-Value="trackDto.difficulty" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="difficulty" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Inclination"]"><RadzenNumeric Name="inclination" @bind-Value="trackDto.inclination" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="inclination" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Length"]"><RadzenNumeric Name="lengthMeters" @bind-Value="trackDto.lengthMeters" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="lengthMeters" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Illuminated"]"><RadzenCheckBox Name="illuminated" @bind-Value="trackDto.illuminated" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="illuminated" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Opened"]"><RadzenCheckBox Name="opened" @bind-Value="statusDto.opened" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="opened" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Snow cover"]"><RadzenNumeric Name="snowCover" @bind-Value="statusDto.snowCover" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="snowCover" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Opening Time"]"><RadzenDatePicker @bind-Value="statusDto.openingTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="openingTime" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="@local["Closing Time"]"><RadzenDatePicker @bind-Value="statusDto.closingTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="closingTime" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenDropDown Data="cameras" @bind-Value="selectedCamerasIds"
                            Multiple="true" TextProperty="name" ValueProperty="id"
                            Placeholder="@local["Select cameras"]" />

            <RadzenButton Text="@local["Submit changes"]" ButtonType="ButtonType.Submit" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService

@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private Track? trackDto = new Track();
    private TrackStatus? statusDto = null;
    private Camera[] cameras { get; set; } = [];
    private IEnumerable<Guid> selectedCamerasIds { get; set; }

    protected override async Task OnInitializedAsync()
    {
        trackDto.id = Guid.NewGuid();
        statusDto = new TrackStatus
            {
                id = Guid.NewGuid(),
                parentTrackId = trackDto.id,
                snowCover = 0,
                opened = true,
                openingTime = TimeOnly.Parse("9:00"),
                closingTime = TimeOnly.Parse("18:00")
            };
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(trackDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(trackDto, context, results, true);

        if (isValid)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                dialogService.Open<_LoadingTaskDialog>(
                    "", new Dictionary<string, object> { { "displayMessage", local["Editing data..."] } },
                    new DialogOptions { CloseDialogOnEsc = false, ShowClose = false });

                var cameraEntries = selectedCamerasIds.Select(cameraId => new CameraTrackBinding
                    {
                        id = Guid.NewGuid(),
                        cameraId = cameraId,
                        trackId = trackDto.id
                    }).ToList();
                trackDto.cameras = cameraEntries;

                var lastStatusDto = await database.statusSheets
                    .OrderByDescending(e => e.dateTime)
                    .Include(e => e.trackStatuses)
                    .Include(e => e.liftStatuses)
                    .Include(e => e.resortStatus)
                    .AsSplitQuery()
                    .AsNoTracking()
                    .FirstOrDefaultAsync(e => e.resortId == selectedResort.id && e.productionVersion == true);

                if (lastStatusDto != null)
                {
                    lastStatusDto.liftStatuses.ToList().ForEach(e => e.id = Guid.NewGuid());
                    lastStatusDto.trackStatuses.ToList().ForEach(e => e.id = Guid.NewGuid());
                    lastStatusDto.resortStatus.id = Guid.NewGuid();
                    lastStatusDto.dateTime = DateTime.Now;
                    lastStatusDto.trackStatuses.Add(statusDto);
                    lastStatusDto.id = Guid.NewGuid();
                    database.statusSheets.Add(lastStatusDto);
                }

                database.tracks.Add(trackDto);

                try
                {
                    await database.SaveChangesAsync();
                    await Task.Delay(2000); // Simulating some processing delay
                    dialogService.Close();
                    navigationManager.NavigateTo("/resort");
                }
                catch
                {
                    dialogService.Close();
                    error = true;
                }
            }
        }
        else
        {
            error = true;
        }

        var notifMessage = new NotificationMessage
            {
                Severity = !error ? NotificationSeverity.Success : NotificationSeverity.Error,
                Summary = !error ? local["Added data successfully!"] : local["There was an error while executing the request"],
                Duration = 3000
            };
        notificationService.Notify(notifMessage);
    }

    private void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                trackDto.resortId = selectedResort.id;
                cameras = database.cameras.Where(e => e.resortId == trackDto.resortId).AsNoTracking().ToArray();
                selectedCamerasIds = database.cameraTrackBindings
                    .Where(e => e.trackId == trackDto.id)
                    .AsNoTracking()
                    .Select(e => e.cameraId)
                    .ToArray();
            }
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
