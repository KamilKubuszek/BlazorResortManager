@page "/resort/track/add"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer<AppLanguage> local
@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService

<h3 class="text-3xl font-bold">@local["Add track"]</h3>

@if (trackDto is not null)
{
    <RadzenTemplateForm Data="trackDto" TItem="Track" Submit="submitForm">
        <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenCard>
                        <RadzenFieldset Text="Data">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Name"]" Component="name" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Name="name" @bind-Value="trackDto.name" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="name" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Marking"]" Component="marking" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Name="marking" @bind-Value="trackDto.marking" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="marking" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Difficulty"]" Component="difficulty" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    @* <RadzenTextBox Name="difficulty" @bind-Value="trackDto.difficulty" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="difficulty" /> *@
                                    <RadzenDropDown Data="difficulties" @bind-Value="trackDto.trackDifficultyId" TValue="int" TextProperty="name" ValueProperty="id">

                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Inclination"]" Component="inclination" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenNumeric Name="inclination" @bind-Value="trackDto.inclination" Style="width: 100%;" />
                                    @* <RadzenDataAnnotationValidator Component="inclination" /> *@
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Length"]" Component="lengthMeters" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenNumeric Name="lengthMeters" @bind-Value="trackDto.lengthMeters" Style="width: 100%;" />
                                    @* <RadzenDataAnnotationValidator Component="lengthMeters" /> *@
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                    </RadzenCard>
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenCard>
                        <RadzenFieldset Text="Status">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Illuminated"]" Component="illuminated" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenCheckBox Name="illuminated" @bind-Value="trackDto.illuminated" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Snowgroomed"]" Component="sg" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenCheckBox Name="sg" @bind-Value="trackDto.snowGroomed" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Opened"]" Component="opened" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenCheckBox Name="opened" @bind-Value="statusDto.opened" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Snow cover"]" Component="snowCover" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenNumeric Name="snowCover" @bind-Value="statusDto.snowCover" Style="width: 100%;" />
                                    
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Opening Time"]" Component="openingTime" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDatePicker @bind-Value="statusDto.openingTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Style="width: 100%;" />
                                    
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="@local["Closing Time"]" Component="closingTime" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDatePicker @bind-Value="statusDto.closingTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Style="width: 100%;" />
                                    
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                    </RadzenCard>
                    <RadzenCard>
                        <RadzenFieldset Text="@local["Bind cameras"]">
@*                             @if(selectedCamerasIds.Count() > 0){
                                <RadzenDropDown Data="cameras" @bind-Value="selectedCamerasIds" Multiple="true" TextProperty="name" ValueProperty="id" Placeholder="@local["Select cameras"]" Style="width: 100%;" />
                            }
                            else{
                                <RadzenStack JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center"
                                             Style="width: 100%; margin-top: 1rem; margin-bottom: 1rem;">

                                    <div class="rz-border-base-500 rz-border-radius-1 p-3">
                                        <p>@local["You have no cameras avaiable"] </p>
                                    </div>
                                </RadzenStack>
                            } *@
                            <RadzenDropDown Data="cameras" @bind-Value="selectedCamerasIds" Multiple="true" TextProperty="name" ValueProperty="id" Placeholder="@local["Select cameras"]" Style="width: 100%;" />
                        </RadzenFieldset>
                    </RadzenCard>
                </RadzenStack>
               
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="@local["Submit changes"]" />
        </RadzenStack>
    </RadzenTemplateForm>

}



@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private Track? trackDto = new Track();
    private TrackStatus? statusDto = null;

    private Camera[] cameras { get; set; } = [];
    private IEnumerable<Guid> selectedCamerasIds { get; set; }

    private TrackDifficulty[] difficulties = [];

    protected override async Task OnInitializedAsync()
    {
        trackDto.id = Guid.NewGuid();
        trackDto.trackDifficultyId = 0;
        statusDto = new TrackStatus
            {
                id = Guid.NewGuid(),
                parentTrackId = trackDto.id,
                snowCover = 0,
                opened = true,
                openingTime = TimeOnly.Parse("9:00"),
                closingTime = TimeOnly.Parse("18:00")
            };
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(trackDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(trackDto, context, results, true);

        if (isValid)
        {
            dialogService.Open<_LoadingTaskDialog>(
                    "", new Dictionary<string, object> { { "displayMessage", "Editing data..." } },
                    new DialogOptions { CloseDialogOnEsc = false, ShowClose = false });


            using (var database = contextFactory.CreateDbContext())
            {


                var cameraEntries = selectedCamerasIds.Select(cameraId => new CameraTrackBinding
                    {
                        id = Guid.NewGuid(),
                        cameraId = cameraId,
                        trackId = trackDto.id
                    }).ToList();
                trackDto.cameras = cameraEntries;

                var lastStatusDto = await database.statusSheets
                    .OrderByDescending(e => e.dateTime)
                    .Include(e => e.trackStatuses)
                    .Include(e => e.liftStatuses)
                    .Include(e => e.resortStatus)
                    .AsSplitQuery()
                    .AsNoTracking()
                    .FirstOrDefaultAsync(e => e.resortId == selectedResort.id && e.productionVersion == true);

                if (lastStatusDto != null)
                {
                    lastStatusDto.liftStatuses.ToList().ForEach(e => e.id = Guid.NewGuid());
                    lastStatusDto.trackStatuses.ToList().ForEach(e => e.id = Guid.NewGuid());
                    lastStatusDto.resortStatus.id = Guid.NewGuid();
                    lastStatusDto.dateTime = DateTime.Now;
                    lastStatusDto.trackStatuses.Add(statusDto);
                    lastStatusDto.id = Guid.NewGuid();
                    database.statusSheets.Add(lastStatusDto);
                }

                database.tracks.Add(trackDto);

                try
                {
                    await database.SaveChangesAsync();
                    await Task.Delay(2000); 
                    dialogService.Close();

                }
                catch
                {
                    dialogService.Close();
                    error = true;
                }
            }
        }
        else
        {
            error = true;
        }

        var notifMessage = new NotificationMessage
            {
                Severity = !error ? NotificationSeverity.Success : NotificationSeverity.Error,
                Summary = !error ? local["Added data successfully!"] : local["There was an error while executing the request"],
                Duration = 3000
            };
        notificationService.Notify(notifMessage);
        if(!error)
            navigationManager.NavigateTo("/resort/track");
    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                trackDto.resortId = selectedResort.id;
                cameras = await database.cameras.Where(e => e.resortId == trackDto.resortId).AsNoTracking().ToArrayAsync();
                selectedCamerasIds = await database.cameraTrackBindings
                    .Where(e => e.trackId == trackDto.id)
                    .AsNoTracking()
                    .Select(e => e.cameraId)
                    .ToArrayAsync();
                difficulties = await database.trackDifficulties.OrderByDescending(e => e.id).ToArrayAsync();
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
