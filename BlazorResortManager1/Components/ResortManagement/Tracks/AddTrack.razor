@implements IDisposable
@page "/resort/track/add"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations

<h3 class="text-3xl font-bold">Add Track</h3>

@if (trackDto is not null)
{
    <RadzenTemplateForm Data="trackDto" TItem="Track" Submit="submitForm">
        <RadzenStack Style="width: 100%">
            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="name"><RadzenTextBox Name="name" @bind-Value="trackDto.name" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="name" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="marking"><RadzenTextBox Name="marking" @bind-Value="trackDto.marking" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="marking" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="difficulty"><RadzenTextBox Name="difficulty" @bind-Value="trackDto.difficulty" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="difficulty" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="inclination"><RadzenNumeric Name="inclination" @bind-Value="trackDto.inclination" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="inclination" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="length"><RadzenNumeric Name="lengthMeters" @bind-Value="trackDto.lengthMeters" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @*  <RadzenColumn><RadzenDataAnnotationValidator Component="lengthMeters" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="illuminated"><RadzenCheckBox Name="illuminated" @bind-Value="trackDto.illuminated" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @*                 <RadzenColumn><RadzenDataAnnotationValidator Component="illuminated" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="opened"><RadzenCheckBox Name="opened" @bind-Value="statusDto.opened" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @*                 <RadzenColumn><RadzenDataAnnotationValidator Component="duration" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="snow cover"><RadzenNumeric Name="duration" @bind-Value="statusDto.snowCover" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @*                 <RadzenColumn><RadzenDataAnnotationValidator Component="duration" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenDatePicker @bind-Value=@statusDto.openingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                </RadzenColumn>
                @*                 <RadzenColumn><RadzenDataAnnotationValidator Component="duration" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenDatePicker @bind-Value=@statusDto.closingTime ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                </RadzenColumn>
                @*                 <RadzenColumn><RadzenDataAnnotationValidator Component="duration" /></RadzenColumn> *@
            </RadzenRow>


            <RadzenDropDown Data="cameras" @bind-Value=@selectedCamerasIds
                            Multiple="true" TextProperty="name" ValueProperty="id"
                            Placeholder="Select cameras" />

            <RadzenButton Text="Submit changes" ButtonType="ButtonType.Submit" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService
@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private Track? trackDto = new Track();
    private TrackStatus? statusDto = null;
    private Camera[] cameras { get; set; } = [];
    private IEnumerable<Guid> selectedCamerasIds { get; set; }

    protected override async Task OnInitializedAsync()
    {
        trackDto.id = Guid.NewGuid();
        statusDto = new TrackStatus()
            {
                id = Guid.NewGuid(),
                parentTrackId = trackDto.id,
                snowCover = 0,
                opened = true,
                openingTime = TimeOnly.Parse("9:00"),
                closingTime = TimeOnly.Parse("18:00")
            };
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(trackDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(trackDto, context, results, true);

        if (isValid)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                dialogService.Open<_LoadingTaskDialog>(
                   "", new Dictionary<string, object>() { { "displayMessage", "editing data..." } },
                       new DialogOptions() { CloseDialogOnEsc = false, ShowClose = false });

                //prepare cameras bindings
                var cameraEntries = new List<CameraTrackBinding>();
                foreach (var cameraId in selectedCamerasIds)
                {
                    cameraEntries.Add(new()
                        {
                            id = Guid.NewGuid(),
                            cameraId = cameraId,
                            trackId = trackDto.id
                        });
                }
                trackDto.cameras = cameraEntries;
                //cameraEntries.ForEach(e => Console.WriteLine("updating with camera: " + e.cameraId));

                //you will update db with new status that will contain this new lift's
                var lastStatusDto = database.statusSheets.OrderByDescending(e => e.dateTime)
                                    .Include(e => e.trackStatuses)
                                    .Include(e => e.liftStatuses)
                                    .Include(e => e.resortStatus)
                                    .AsSplitQuery()
                                    .AsNoTracking()
                                    .FirstOrDefault(e => e.resortId == selectedResort.id && e.productionVersion == true);
                Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(lastStatusDto, new System.Text.Json.JsonSerializerOptions { WriteIndented = true, ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles }));

                lastStatusDto.liftStatuses.ToList().ForEach(e => e.id = Guid.NewGuid());
                lastStatusDto.trackStatuses.ToList().ForEach(e => e.id = Guid.NewGuid());
                lastStatusDto.resortStatus.id = Guid.NewGuid();
                lastStatusDto.dateTime = DateTime.Now;
                List<TrackStatus> ls = lastStatusDto.trackStatuses.ToList();
                ls.Add(statusDto);
                lastStatusDto.trackStatuses = ls;
                lastStatusDto.id = Guid.NewGuid();
                database.statusSheets.Add(lastStatusDto);

                database.tracks.Add(trackDto);

                try
                {
                    await database.SaveChangesAsync();
                    await Task.Delay(2000);
                    dialogService.Close();
                    navigationManager.NavigateTo("/resort");
                }
                catch
                {
                    dialogService.Close();
                    error = true;
                }
            }
        }
        else
            error = true;

        var notifMessage = new NotificationMessage();
        if (!error)
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Added data successfully!",
                    Duration = 3000
                };
        }
        else
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "There was an error while executing the request",
                    Duration = 3000
                };
        }
        notificationService.Notify(notifMessage);
    }

    private void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                trackDto.resortId = selectedResort.id;
                cameras = database.cameras.Where(e => e.resortId == trackDto.resortId).AsNoTracking().ToArray();
                selectedCamerasIds = database.cameraTrackBindings.Where(e => e.trackId == trackDto.id).AsNoTracking().Select(e => e.cameraId).ToArray();
            }
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}