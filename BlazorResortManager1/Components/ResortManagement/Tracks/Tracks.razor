@page "/resort/Track"
@attribute [Authorize]
@inject IStringLocalizer<AppLanguage> local
@inject IJSRuntime JSRuntime

<h3 class="text-3xl font-bold">@local["Tracks"]</h3>
@if (resortData is not null)
{
    <RadzenStack>
        <RadzenRow JustifyContent="JustifyContent.Right" Style="position: sticky; top: 0; z-index: 3">
            <RadzenColumn SizeMD="6" Size="12">
                <RadzenCard Style="width: 100%; height: fit-content; padding: 0.5rem;">
                    <RadzenStack JustifyContent="JustifyContent.SpaceEvenly" Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal" Gap="0.5rem">
                        <RadzenButton Text="@local["Add"]" Click="@(() => navigationManager.NavigateTo("/resort/track/add"))" />
                        <RadzenButton Text="@local["Edit"]" Click="editTrack" Icon="Edit_Note" Variant="Variant.Outlined" Disabled="@(selectedTracks?.Any() == true ? false : true)" />
                        <RadzenButton Text="@local["Delete"]" Click="deleteTrack" Icon="Delete" Variant="Variant.Outlined" Disabled="@(selectedTracks?.Any() == true ? false : true)" ButtonStyle="ButtonStyle.Danger" />
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn>
                <RadzenCard id="toResize">
                    <RadzenDataGrid Style="height: 100%" TItem="Track" Data=@resortData.tracks @bind-Value=selectedTracks SelectionMode="DataGridSelectionMode.Single" PageSize="7"
                                    AllowAlternatingRows="false" AllowFiltering="false" AllowPaging="false" AllowSorting="true">@* @(resortData.tracks.Count > 7) *@
                        <Columns>
                            @* <RadzenDataGridColumn TItem="Track" Property="id" Title="@local["ID"]" Width="100px" Frozen="true" /> *@

                            <RadzenDataGridColumn TItem="Track" Property="name" Title="@local["Name"]" Width="100px" Frozen="true" />

                            <RadzenDataGridColumn TItem="Track" Property="marking" Title="@local["Marking"]" Width="100px" />

                            <RadzenDataGridColumn TItem="Track" Title="@local["Difficulty"]" Width="100px">
                                <Template Context="Track">
                                    @Track.trackDifficulty.name
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="Track" Property="inclination" Title="@local["Inclination"]" Width="100px" TextAlign="TextAlign.Center"/>

                            <RadzenDataGridColumn TItem="Track" Title="@local["Snow groomed"]" Width="100px" TextAlign="TextAlign.Center">
                                <Template Context="track">
                                    <RadzenIcon Icon="@(track.snowGroomed ? "Check_Circle" : "Cancel")" IconColor="@(track.snowGroomed ? Colors.Success : Colors.Danger)" />
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="Track" Title="@local["Illuminated"]" Width="100px" TextAlign="TextAlign.Center">
                                <Template Context="track">
                                    <RadzenIcon Icon="@(track.illuminated ? "Check_Circle" : "Cancel")" IconColor="@(track.illuminated ? Colors.Success : Colors.Danger)" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
}
else
{
    <p>@local["Select resort first"]</p>
}

@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject DialogService dialogService
@inject NotificationService notificationService
@inject ContextMenuService contextMenuService
@inject NavigationManager navigationManager
@inject ResortChangeManager resortChangeManager
@implements IDisposable

@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    private Resort resortData { get; set; }

    private IList<Track> selectedTracks { get; set; } = new List<Track>();

    protected override async Task OnInitializedAsync()
    {
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("sizeHeightToBottom", "toResize");
        }
    }

    private async Task deleteTrack()
    {
        var result = await dialogService.OpenAsync<_ConfirmDialog>(
            local["Confirm action"], new Dictionary<string, object>() { },
            new DialogOptions() { ShowClose = false });

        if (result == true)
        {
            bool error = false;
            try
            {
                var track = selectedTracks.FirstOrDefault();

                if (track != null)
                {
                    selectedTracks.Clear();

                    using (var database = contextFactory.CreateDbContext())
                    {
                        var cameraBindings = await database.cameraTrackBindings.Where(e => e.trackId == track.id).ToArrayAsync();
                        foreach (var bind in cameraBindings)
                        {
                            database.cameraTrackBindings.Remove(bind);
                        }

                        var statuses = await database.trackStatuses.Where(e => e.parentTrackId == track.id).ToArrayAsync();
                        foreach (var tstatus in statuses)
                        {
                            database.trackStatuses.Remove(tstatus);
                        }
                        database.Remove(track);

                        await database.SaveChangesAsync();
                    }
                }
                else
                {
                    throw new Exception();
                }
            }
            catch
            {
                dialogService.Close();
                error = true;
            }

            var notifMessage = new NotificationMessage
                {
                    Severity = !error ? NotificationSeverity.Success : NotificationSeverity.Error,
                    Summary = !error ? local["Deleted data successfully!"] : local["There was an error while executing the request"],
                    Duration = 3000
                };
            notificationService.Notify(notifMessage);
            updateData();
        }
    }

    private void editTrack()
    {
        if (selectedTracks?.Any() == true)
        {
            navigationManager.NavigateTo("/resort/track/edit/" + selectedTracks[0].id);
        }
    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                resortData = selectedResort;
                resortData.tracks = await database.tracks.Where(e => e.resortId == selectedResort.id).Include(e => e.trackDifficulty)
                    .OrderByDescending(e => e.name).ToListAsync();
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
