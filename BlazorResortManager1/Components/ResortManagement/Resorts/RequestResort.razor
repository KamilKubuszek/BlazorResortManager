@page "/resort/request/add"
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject IStringLocalizer<AppLanguage> local
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService

<h3 class="text-3xl font-bold">@local["Send request to create resort"]</h3>
<hr />
<p>@local["After your request is sent, it is added to queue. You will receive a message via email about the status of your request."]</p>
<br />

<RadzenTemplateForm Data="resortDto" TItem="Resort" Submit="addResort">
    <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenCard>
                    <RadzenFieldset Text="@local["Data"]">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Component="name" Text="@local["Name"]" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Name="name" @bind-Value="resortDto.name" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="name" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Component="description" Text="@local["Description"]" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextArea Name="description" Rows="9" @bind-Value="resortDto.description" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="description" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Component="webpage" Text="@local["Webpage"]" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Name="webpage" @bind-Value="resortDto.webpage" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="webpage" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenCard>
            </RadzenStack>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenCard>
                    <RadzenFieldset Text="@local["Contact"]">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Component="email" Text="@local["Email"]" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Name="email" @bind-Value="resortDto.email" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="email" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Component="phone" Text="@local["Phone Number"]" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenMask Mask="+** *** *** ***" Name="phone" @bind-Value="resortDto.phoneNumber" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="phone" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenCard>

                <RadzenCard>
                    <RadzenFieldset Text="@local["Location"]">
                        <RadzenStack Gap="1rem">
                            <p>@local["Input coordinates of your resort (you can find them using Google Earth)."]</p>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Component="address" Text="@local["Address"]" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Name="address" @bind-Value="resortDto.address" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="address" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenLabel Component="cordX" Text="@local["X Axis"]" />
                                    <RadzenMask Mask="**° **\'" Placeholder="12° 33'" Name="cordX" @bind-Value="resortDto.coordinatesX" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="cordX" />
                                    <RadzenSelectBar TValue="int" Size="ButtonSize.Small" @bind-Value="SelectedX">
                                        <Items>
                                            <RadzenSelectBarItem Value="1" Text="@local["East"]" />
                                            <RadzenSelectBarItem Value="2" Text="@local["West"]" />
                                        </Items>
                                    </RadzenSelectBar>
                                </RadzenColumn>

                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenLabel Component="cordY" Text="@local["Y Axis"]" />
                                    <RadzenMask Mask="**° **\'" Placeholder="32° 87'" Name="cordY" @bind-Value="resortDto.coordinatesY" Style="width: 100%;" />
                                    <RadzenDataAnnotationValidator Component="cordY" />
                                    <RadzenSelectBar TValue="int" Size="ButtonSize.Small" @bind-Value="SelectedY">
                                        <Items>
                                            <RadzenSelectBarItem Value="1" Text="@local["North"]" />
                                            <RadzenSelectBarItem Value="2" Text="@local["South"]" />
                                        </Items>
                                    </RadzenSelectBar>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenCard>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="@local["Submit"]" />
    </RadzenStack>

   
</RadzenTemplateForm>


@code {
    private int SelectedX { get; set; } = 1;
    private int SelectedY { get; set; } = 1;

    private Resort? resortDto = new Resort() { id = Guid.NewGuid(), approved = false };

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task addResort()
    {
        bool error = false;
        string? errMessage = null;
        ValidationContext context = new ValidationContext(resortDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(resortDto, context, results, true);

        if (isValid)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                try
                {
                    dialogService.Open<_LoadingTaskDialog>(
                        "", new Dictionary<string, object>() { { "displayMessage", "Adding data..." } },
                        new DialogOptions() { CloseDialogOnEsc = false, ShowClose = false });

                    var auth = await authenticationState;
                    var userId = auth.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
                    if (userId is null)
                        throw new Exception();

                    var permitsWithoutApproval = await database.permits
                        .Where(e => e.resort.approved == false && e.ApplicationUser.Id == userId)
                        .CountAsync();

                    if (permitsWithoutApproval > 3)
                    {
                        errMessage = local["You already sent the max limit of resort requests (3 out of 3)"];
                        throw new Exception();
                    }

                    //add direction to coordinates
                    resortDto.coordinatesX += SelectedX == 1 ? "E" : "W";
                    resortDto.coordinatesY += SelectedY == 1 ? "N" : "S";
                    //requestDto.userId = userId;

                    database.resorts.Add(resortDto);
                    database.permits.Add(new Permit
                        {
                            id = Guid.NewGuid(),
                            userId = userId,
                            resortId = resortDto.id
                        });

                    

                    await database.SaveChangesAsync();
                    await Task.Delay(2000);
                    dialogService.Close();
                }
                catch
                {
                    error = true;
                    dialogService.Close();
                }
            }
        }
        else
        {
            error = true;
        }

        var notifMessage = new NotificationMessage
            {
                Severity = !error ? NotificationSeverity.Success : NotificationSeverity.Error,
                Summary = !error ? local["Sent request data successfully!"] : errMessage ?? local["There was an error while executing the request"],
                Duration = 3000
            };
        notificationService.Notify(notifMessage);
    }
}
