@implements IDisposable
@page "/resort/lift/edit/{selectedLiftId:guid?}"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations

<h3>Edit Lift</h3>
@(selectedLiftId.ToString() ?? "no lift")

@if (liftDto is not null)
{
    <RadzenTemplateForm Data="liftDto" TItem="Lift" Submit="submitForm">
        <RadzenStack Style="width: 100%">
            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="name"><RadzenTextBox Name="name" @bind-Value="liftDto.name" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="name" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="type"><RadzenTextBox Name="type" @bind-Value="liftDto.type" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                <RadzenColumn><RadzenDataAnnotationValidator Component="type" /></RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="length"><RadzenNumeric Name="length" @bind-Value="liftDto.lengthMeters" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="length" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="capacity per unit"><RadzenNumeric Name="capacity" @bind-Value="liftDto.capacityPerSeat" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="capacity" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="people per hour"><RadzenNumeric Name="capacity" @bind-Value="liftDto.peoplePerHour" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="capacity" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="people per hour"><RadzenNumeric Name="peoplePerHour" @bind-Value="liftDto.peoplePerHour" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
                @* <RadzenColumn><RadzenDataAnnotationValidator Component="peoplePerHour" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                <RadzenColumn>
                    <RadzenFormField Text="average duration time"><RadzenNumeric Name="duration" @bind-Value="liftDto.estimatedDurationTimeMinutes" Style="width: 100%;" /></RadzenFormField>
                </RadzenColumn>
@*                 <RadzenColumn><RadzenDataAnnotationValidator Component="duration" /></RadzenColumn> *@
            </RadzenRow>

            <RadzenDropDown Data="cameras" @bind-Value=@selectedCamerasIds
                            Multiple="true" TextProperty="name" ValueProperty="id" 
                            Placeholder="Select cameras" Change="setCameraBindings"/>

            <RadzenButton Text="Submit changes" ButtonType="ButtonType.Submit" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService
@code {
    // [CascadingParameter]
    // private Resort? selectedResort { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public Guid? selectedLiftId { get; set; }

    private Lift? liftDto { get; set; }
    private Camera[] cameras { get; set; } = [];
    private IEnumerable<Guid> selectedCamerasIds { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        await validateLiftOwnership();

        resortChangeManager.ResortChange += updateForm;
        if (selectedLiftId != null)
        {
            Console.WriteLine("update form...");
            updateForm();
        }

    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(liftDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(liftDto, context, results, true);

        if (isValid)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                dialogService.Open<_LoadingTaskDialog>(
                   "", new Dictionary<string, object>() { { "displayMessage", "editing data..." } },
                       new DialogOptions() { CloseDialogOnEsc = false, ShowClose = false });

                //prepare cameras to 
                var cameraBindings = database.cameraLiftBindings.Where(e => e.liftId == liftDto.id).AsNoTracking(); ;
                var cameraEntries = new List<CameraLiftBinding>();

                //check if there are already exiting bindings from selected cameras
                foreach(var cameraId in selectedCamerasIds)
                {
                    
                    var exitingBind = cameraBindings.FirstOrDefault(e => e.cameraId == cameraId);
                    if(exitingBind is null)
                    {
                        var bind = new CameraLiftBinding() { cameraId = cameraId, liftId = liftDto.id };
                        cameraEntries.Add(bind);
                    }

                    //delete bindings which are no longer needed from database
                    foreach (var existingBind in cameraBindings)
                    {
                        var duplicate = selectedCamerasIds.FirstOrDefault(e => e == existingBind.cameraId);                        
                        if (duplicate == Guid.Empty)
                        {
                            database.Remove(existingBind);
                        }
                    }
                }
                foreach(var existingBind in cameraBindings)
                {
                    var duplicate = selectedCamerasIds.FirstOrDefault(e => e == existingBind.cameraId);
                    // Console.WriteLine(Guid.Empty);
                    Console.WriteLine("----------------removing no longer using bind: " + duplicate);
                    if (duplicate != Guid.Empty)
                    {
                        
                        // database.Attach(existingBind);
                        // database.Entry(existingBind).State = EntityState.Deleted;
                        //database.Remove(existingBind);
                    }
                }
                liftDto.cameras = cameraEntries;
                cameraEntries.ForEach(e => Console.WriteLine("updating with camera: "+e.cameraId));
                database.Attach(liftDto);
                database.Entry(liftDto).State = EntityState.Modified;


                try
                {
                    await database.SaveChangesAsync();
                    await Task.Delay(2000);
                    dialogService.Close();
                    navigationManager.NavigateTo("/resort");
                }
                catch
                {
                    error = true;
                }
            }
        }
        else
            error = true;

        var notifMessage = new NotificationMessage();
        if (!error)
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Edited data successfully!",
                    Duration = 3000
                };
        }
        else
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "There was an error while executing the request",
                    Duration = 3000
                };
        }
        notificationService.Notify(notifMessage);
    }

    private async Task validateLiftOwnership()
    {
        try
        {
            var auth = await authenticationState;
            var userId = auth.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (userId is null)
            {
                throw new Exception("user permit for lifts id was not found");
            }

            using (var database = contextFactory.CreateDbContext())
            {
                var lift = database.lifts.FirstOrDefault(e => e.id == selectedLiftId);
                if (lift is null)
                {
                    throw new Exception("lift was not found");
                }

                var permit = database.permits
                    .FirstOrDefault(e => e.userId == userId && e.resortId == lift.resortId);
                if (permit is null)
                {
                    throw new Exception("user permit for lifts id was not found");
                }
            }
        }
        catch (Exception e)
        {
            var notifMessage = new NotificationMessage();

            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "you dont have permissions to do this or something went wrong",
                    Duration = 4000
                };

            notificationService.Notify(notifMessage);
            navigationManager.NavigateTo("/resort");

            Console.WriteLine(e.Message);
        }
    }

    private void updateForm(ResortChangeEventArgs? eventArgs = null)
    {
        using (var database = contextFactory.CreateDbContext())
        {
            liftDto = database.lifts.FirstOrDefault(e => e.id == selectedLiftId);
            cameras = database.cameras.Where(e => e.resortId == liftDto.resortId).AsNoTracking().ToArray();
            selectedCamerasIds = database.cameraLiftBindings.Where(e => e.liftId == liftDto.id).AsNoTracking().Select(e => e.cameraId).ToArray();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateForm;
    }
}