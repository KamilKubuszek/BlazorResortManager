@attribute [Authorize]
@page "/resort/Lift"

<h3 class="text-3xl font-bold">@local["Lifts"]</h3>

<RadzenStack Style="">
    @if (resortData is not null)
    {
        <RadzenRow JustifyContent="JustifyContent.Right">
            <RadzenColumn SizeMD="6" Size="12">
                <RadzenCard Style="width: 100%; height: fit-content; padding: 0.5rem;">
                    <RadzenStack JustifyContent="JustifyContent.SpaceEvenly" Orientation="Orientation.Horizontal" Gap="0.5rem">
                        <RadzenButton Text="@local["Add"]" Click="@(() => navigationManager.NavigateTo("/resort/lift/add") )" />
                        <RadzenButton Text="@local["Edit"]" Click="editLift" Icon="Edit_Note" Variant="Variant.Outlined" Disabled="@(selectedLifts?.Any() == true ? false : true)" />
                        <RadzenButton Text="@local["Delete"]" Click="deleteLift" Icon="Delete" Variant="Variant.Outlined" Disabled="@(selectedLifts?.Any() == true ? false : true)" ButtonStyle="ButtonStyle.Danger" />
                    </RadzenStack>
                </RadzenCard>

            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="12">
                <RadzenDataGrid id="toResize" Data="@resortData.lifts" TItem="Lift" AllowColumnResize="true" AllowAlternatingRows="false" AllowFiltering="false" AllowPaging="false" AllowSorting="true" ColumnWidth="100px"
                                CellContextMenu="OnCellLiftContextMenu" @bind-Value=selectedLifts SelectionMode="DataGridSelectionMode.Single">
                    <Columns>
                        <RadzenDataGridColumn TItem="Lift" Property="name" Title="@local["Name"]" Frozen="true">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Lift" Property="type" Title="@local["Type"]">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Lift" Property="lengthMeters" Title="@local["Length meters"]">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Lift" Property="capacityPerSeat" Title="@local["Capacity per seat"]">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Lift" Property="peoplePerHour" Title="@local["People per hour"]">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Lift" Property="estimatedDurationTimeMinutes" Title="@local["Estimated duration time minutes"]">
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>

            </RadzenColumn>
        </RadzenRow>
    }
    else
    {
        <p>@local["Select resort first"]</p>
    }
</RadzenStack>

@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject DialogService dialogService
@inject NotificationService notificationService
@inject ContextMenuService contextMenuService
@inject NavigationManager navigationManager
@inject ResortChangeManager resortChangeManager
@inject IStringLocalizer<AppLanguage> local
@inject IJSRuntime JSRuntime
@implements IDisposable

@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    private Resort resortData { get; set; }

    private IList<Lift> selectedLifts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("sizeHeightToBottom", "toResize");
        }
    }

    private void OnCellLiftContextMenu(DataGridCellMouseEventArgs<Lift> args)
    {
        contextMenuService.Open(args, new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = local["EditInformation"], Value = 1, Icon = "Edit_Note" },
                new ContextMenuItem(){ Text = local["Delete"], Value = 2, Icon = "Delete" }
            },
            async (menuArgs) =>
            {
                if (menuArgs.Value.Equals(1))
                {
                    contextMenuService.Close();
                    navigationManager.NavigateTo("/resort/lift/edit/" + args.Data.id);
                }
                else if (menuArgs.Value.Equals(2))
                {
                    selectedLifts[0] = args.Data;
                    contextMenuService.Close();
                    await deleteLift();
                }
            });
    }

    private async Task deleteLift()
    {
        var result = await dialogService.OpenAsync<_ConfirmDialog>(
            local["ConfirmAction"], new Dictionary<string, object>() { },
            new DialogOptions() { ShowClose = false });

        if (result == true)
        {
            bool error = false;
            try
            {
                var lift = selectedLifts[0];

                if (selectedLifts?.Any() == true)
                {
                    selectedLifts.Clear();
                }
                else throw new Exception();

                using (var database = contextFactory.CreateDbContext())
                {
                    var cameraBindings = await database.cameraLiftBindings.Where(e => e.liftId == lift.id).ToArrayAsync();
                    foreach (var bind in cameraBindings)
                    {
                        database.cameraLiftBindings.Remove(bind);
                    }

                    var statuses = await database.liftStatuses.Where(e => e.parentLiftId == lift.id).ToArrayAsync();
                    foreach (var lstatus in statuses)
                    {
                        database.liftStatuses.Remove(lstatus);
                    }
                    database.Remove(lift);

                    database.SaveChanges();
                }
            }
            catch
            {
                dialogService.Close();
                error = true;
            }

            var notifMessage = new NotificationMessage();
            if (!error)
            {
                notifMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = @local["Deleted data successfully!"],
                        Duration = 3000
                    };
            }
            else
            {
                notifMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = @local["There was an error while executing the request"],
                        Duration = 3000
                    };
            }
            notificationService.Notify(notifMessage);
            updateData();
        }
    }

    private void editLift()
    {
        if (selectedLifts?.Any() == true)
        {
            navigationManager.NavigateTo("/resort/lift/edit/" + selectedLifts[0].id);
        }
    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                resortData = selectedResort;
                resortData.lifts = await database.lifts.Where(e => e.resortId == selectedResort.id).ToListAsync();
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
