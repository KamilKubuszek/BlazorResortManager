@implements IDisposable
@page "/resort/lift/add"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations

@inject IStringLocalizer<AppLanguage> local
@inject ResortChangeManager resortChangeManager
@inject NavigationManager navigationManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject NotificationService notificationService
@inject DialogService dialogService

<h3 class="text-3xl font-bold">@local["Add Lift"]</h3>

@if (liftDto is not null)
{
    <RadzenTemplateForm Data="liftDto" TItem="Lift" Submit="submitForm">
        <RadzenStack Style="width: 100%">
            <RadzenRow>
                <RadzenColumn Size="6">
                    <RadzenFieldset Text="@local["Data"]">
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="name" Text="@local["Name"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenTextBox Name="name" @bind-Value="liftDto.name" Style="display: block; width: 100%" />
                                <RadzenDataAnnotationValidator Component="name" Style="position: absolute;" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="type" Text="@local["Type"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenTextBox Name="type" @bind-Value="liftDto.type" Style="width: 100%;" />
                                <RadzenDataAnnotationValidator Component="type" Style="position: absolute;" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="length" Text="@local["Length"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenNumeric Name="length" @bind-Value="liftDto.lengthMeters" Style="width: 100%; display: block;" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="capacity" Text="@local["Capacity Per Unit"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenNumeric Name="capacity" @bind-Value="liftDto.capacityPerSeat" Style="width: 100%; display: block;" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="peoplePerHour" Text="@local["People Per Hour"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenNumeric Name="peoplePerHour" @bind-Value="liftDto.peoplePerHour" Style="width: 100%; display: block;" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="duration" Text="@local["Average Duration Time"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenNumeric Name="duration" @bind-Value="liftDto.estimatedDurationTimeMinutes" Style="width: 100%; display: block;" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenFieldset>
                </RadzenColumn>
                <RadzenColumn Size="6">
                    <RadzenFieldset Text="@local["Bind Cameras"]">
                        <RadzenDropDown Data="cameras" @bind-Value="@selectedCamerasIds" Multiple="true" TextProperty="name" ValueProperty="id" Placeholder="@local["Select cameras"]" />
                    </RadzenFieldset>

                    <RadzenFieldset Text="@local["Status"]">
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="opened" Text="@local["Opened"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenCheckBox Name="opened" @bind-Value="statusDto.opened" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="openingTime" Text="@local["Opening Time"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenDatePicker @bind-Value="@statusDto.openingTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenLabel Component="closingTime" Text="@local["Closing Time"]" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenDatePicker @bind-Value="@statusDto.closingTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenFieldset>
                </RadzenColumn>
            </RadzenRow>

            <RadzenButton Text="@local["Submit"]" ButtonType="ButtonType.Submit" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@code {
    [CascadingParameter]
    public Resort? selectedResort { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private Lift? liftDto = new Lift();
    private LiftStatus? statusDto = null;
    private Camera[] cameras { get; set; } = [];
    private IEnumerable<Guid> selectedCamerasIds { get; set; }

    protected override async Task OnInitializedAsync()
    {
        liftDto.id = Guid.NewGuid();
        statusDto = new LiftStatus()
            {
                id = Guid.NewGuid(),
                parentLiftId = liftDto.id,
                opened = true,
                openingTime = TimeOnly.Parse("9:00"),
                closingTime = TimeOnly.Parse("18:00")
            };
        updateData();
        resortChangeManager.ResortChange += updateData;
    }

    private async Task submitForm()
    {
        bool error = false;
        ValidationContext context = new ValidationContext(liftDto);
        ICollection<ValidationResult> results = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(liftDto, context, results, true);

        if (isValid)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                dialogService.Open<_LoadingTaskDialog>(
                   "", new Dictionary<string, object>() { { "displayMessage", "Editing data..." } },
                       new DialogOptions() { CloseDialogOnEsc = false, ShowClose = false });

                // Prepare cameras bindings
                var cameraEntries = new List<CameraLiftBinding>();
                foreach (var cameraId in selectedCamerasIds)
                {
                    cameraEntries.Add(new()
                        {
                            id = Guid.NewGuid(),
                            cameraId = cameraId,
                            liftId = liftDto.id
                        });
                }
                liftDto.cameras = cameraEntries;

                // Update db with new status that will contain this new lift's
                var lastStatusDto = await database.statusSheets.OrderByDescending(e => e.dateTime)
                                    .Include(e => e.trackStatuses)
                                    .Include(e => e.liftStatuses)
                                    .Include(e => e.resortStatus)
                                    .AsSplitQuery()
                                    .AsNoTracking()
                                    .FirstOrDefaultAsync(e => e.resortId == selectedResort.id && e.productionVersion == true);

                lastStatusDto.liftStatuses.ToList().ForEach(e => e.id = Guid.NewGuid());
                lastStatusDto.trackStatuses.ToList().ForEach(e => e.id = Guid.NewGuid());
                lastStatusDto.resortStatus.id = Guid.NewGuid();
                lastStatusDto.dateTime = DateTime.Now;
                List<LiftStatus> ls = lastStatusDto.liftStatuses.ToList();
                ls.Add(statusDto);
                lastStatusDto.liftStatuses = ls;
                lastStatusDto.id = Guid.NewGuid();
                database.statusSheets.Add(lastStatusDto);

                database.lifts.Add(liftDto);

                try
                {
                    await database.SaveChangesAsync();
                    await Task.Delay(2000);
                    dialogService.Close();
                    navigationManager.NavigateTo("/resort");
                }
                catch
                {
                    dialogService.Close();
                    error = true;
                }
            }
        }
        else
            error = true;

        var notifMessage = new NotificationMessage();
        if (!error)
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = local["Added data successfully!"],
                    Duration = 3000
                };
        }
        else
        {
            notifMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = local["There was an error while executing the request"],
                    Duration = 3000
                };
        }
        notificationService.Notify(notifMessage);
    }

    private async void updateData(ResortChangeEventArgs? eventArgs = null)
    {
        if (selectedResort is not null)
        {
            using (var database = contextFactory.CreateDbContext())
            {
                liftDto.resortId = selectedResort.id;

                cameras = await database.cameras.Where(e => e.resortId == liftDto.resortId).AsNoTracking().ToArrayAsync();
                selectedCamerasIds = await database.cameraLiftBindings.Where(e => e.liftId == liftDto.id).AsNoTracking().Select(e => e.cameraId).ToArrayAsync();
            }
        }
    }

    public void Dispose()
    {
        resortChangeManager.ResortChange -= updateData;
    }
}
