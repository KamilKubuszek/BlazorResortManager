<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   
    <base href="/" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Playwrite+HR+Lijeva:wght@100..400&display=swap" rel="stylesheet">


    <link rel="stylesheet" href="BlazorResortManager1.styles.css" />

    <RadzenTheme Theme="material" @rendermode="InteractiveServer" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="./css/app.css" />
    <HeadOutlet @rendermode=RenderModeForPage />
</head>

<body style="font-family: 'Montserrat', sans-serif; margin: 0; height: 100%;">

    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script src="_framework/blazor.web.js"></script>
    <script>
        function sizeHeightToBottom(elementId) {
            //get the element
            var targetElement = document.getElementById(elementId);

            var windowHeight = window.innerHeight;


            var contHoffset = targetElement.offsetTop;
            targetElement.style.position = "absolute";
            targetElement.style.top = contHoffset + "px";
            targetElement.style.bottom = "16px"
            targetElement.style.left = "16px" 
            targetElement.style.right = "16px"

            //targetElement.style.height = (windowHeight - contHoffset - 6 * 16) + "px";
        }
        function setMaxHeightToBottom(elementId, margin, marginMultiplier) {

            //get the element
            var targetElement = document.getElementById(elementId);

            var windowHeight = window.innerHeight;

            var contHoffset = targetElement.offsetTop;

            targetElement.style.height = (windowHeight - contHoffset - margin * marginMultiplier) + "px";

        }
        function alertThing() {
            alert("alerting test");
        }
    </script>
   

    <Routes @rendermode=RenderModeForPage />
</body>

</html>
@inject NavigationManager NavigationManager
@code{
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? RenderModeForPage =>
        NavigationManager.ToBaseRelativePath(NavigationManager.Uri).StartsWith("resort")
        ? new InteractiveServerRenderMode(prerender: false) : null;

}