@page "/widget/{selectedResortId:guid}/{selectedTab:int}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IStringLocalizer<AppLanguage> local
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject IForecastClient forecastClient
@inject IJSRuntime JSRuntime

@using System.Globalization
@if (!loading)
{
    @switch (selectedTab)
    {
        case 0:
            <RadzenDataGrid id="res1" Data="sheet.trackStatuses.OrderByDescending(e => e.parentTrack.name)"
                            TItem="TrackStatus" AllowVirtualization="true" Style="height: 100vh">
                <Columns>
                    <RadzenDataGridColumn Title="@local["Name"]" TextAlign="TextAlign.Center">
                        <Template Context="status">
                            @status.parentTrack.name
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="@nameof(TrackStatus.opened)" Title="@local["Active"]" TextAlign="TextAlign.Center">
                        <Template Context="status">
                            <div class="notranslate">
                                <RadzenIcon Icon="@(status.opened ? "Check_Circle" : "Cancel")" IconColor="@(status.opened ? Colors.Success : Colors.Danger)" />

                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="@nameof(TrackStatus.snowCover)" Title="@local["Snow cover"]" TextAlign="TextAlign.Center">

                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="@nameof(TrackStatus.openingTime)" Title="@local["Opening at"]" TextAlign="TextAlign.Center">

                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="@nameof(TrackStatus.openingTime)" Title="@local["Closing at"]" TextAlign="TextAlign.Center">

                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            break;
        case 1:
            <RadzenDataGrid id="res2" Data="sheet.liftStatuses.OrderByDescending(e => e.parentLift.name)"
                            TItem="LiftStatus" Style="height:100vh">
                <Columns>
                    <RadzenDataGridColumn Title="@local["Name"]" TextAlign="TextAlign.Center">
                        <Template Context="status">
                            @status.parentLift.name
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="@nameof(LiftStatus.opened)" Title="@local["Active"]" TextAlign="TextAlign.Center">
                        <Template Context="status">
                            <div class="notranslate">
                                <RadzenIcon Icon="@(status.opened ? "Check_Circle" : "Cancel")" IconColor="@(status.opened ? Colors.Success : Colors.Danger)" />
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="@nameof(LiftStatus.openingTime)" Title="@local["Opening at"]" TextAlign="TextAlign.Center">

                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="@nameof(LiftStatus.openingTime)" Title="@local["Closing at"]" TextAlign="TextAlign.Center">

                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            break;
        case 2:
            <div id="weatherContainer" class="h-fit">
                <RadzenDataGrid Data="forecastTableData.Take(9)" TItem="ForecastTableModel" Style="height: 95vh;">
                    <Columns>
                        <RadzenDataGridColumn Title="@local["Day"]">
                            <Template Context="timeserie">
                                @(timeserie.time.DayOfWeek + " "
                        + timeserie.time.Day + " "
                        + timeserie.time.ToString("MMM", CultureInfo.InvariantCulture)
                        + ".")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="@local["00-12"]" Width="82px" TextAlign="TextAlign.Center">
                            <Template Context="timeserie">
                                @if (timeserie.midnightToTwelve is not null)
                                {
                                    <img width="50px" draggable="false" src="@("Resources/WeatherIcons/"+timeserie.midnightToTwelve?.symbol_code+".png")" loading="lazy" />
                                }
                                else
                                {
                                    <p></p>
                                }

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="@local["12-00"]" Width="82px" TextAlign="TextAlign.Center">
                            <Template Context="timeserie">
                                @if (timeserie.twelveToMidnight is not null)
                                {
                                    <img width="50px" draggable="false" src="@("Resources/WeatherIcons/"+timeserie.twelveToMidnight?.symbol_code+".png")" loading="lazy" />
                                }
                                else
                                {
                                    <p></p>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="@local["Max/min temp."]">
                            <Template Context="timeserie">
                                @(timeserie.maxTemp + "/" + timeserie.minTemp)
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Title="@local["Precipitation"]">
                            <Template Context="timeserie">
                                @(timeserie.precipitation > 0 ? timeserie.precipitation : "")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="@local["Max/min wind speed"]">
                            <Template Context="timeserie">
                                @(timeserie.maxWind + "/" + timeserie.minWind + " m/s")
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <p>
                    @local["Powered by"] <a class="text-blue-500 hover:underline" href="https://www.yr.no">Norwegian Meteorological Institute and NRK</a>
                </p>
            </div>
            break;
        case 3:
            @if (cameras.Any())
            {
                <div class="relative h-[300px] w-full">
                    <iframe class="h-full w-full" src="@cameras[currentCameraIndex].link"></iframe>
                    @if (currentCameraIndex != 0)
                    {
                        <div class="leading-[150px] absolute left-0 top-1/4 block h-[150px] w-[50px] cursor-pointer bg-gray-400 text-center text-3xl text-white opacity-50 hover:bg-gray-300">
                            @("<")
                        </div>

                    }
                    @if (currentCameraIndex + 1 < cameras.Count())
                    {
                        <div class="leading-[150px] absolute right-0 top-1/4 block h-[150px] w-[50px] cursor-pointer bg-gray-400 text-center text-3xl text-white opacity-50 hover:bg-gray-300">
                            @(">")
                        </div>
                    }

                </div>


            }
            else
            {
                <p>@local["There are no cameras available"]</p>
            }
            break;
    }
}
else
{
    <_LoadingScreen/>
}

	



@code {
    [Parameter]
    public Guid selectedResortId { get; set; }

    [Parameter]
    public int selectedTab { get; set; } = 0;

    private bool loading { get; set; } = false;

    private StatusSheet? sheet = null;

    IEnumerable<ForecastTableModel>? forecastTableData;

    private Camera[] cameras = [];
    private int currentCameraIndex { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        loading = true;


        using (var database = contextFactory.CreateDbContext())
        {
            sheet = await database.statusSheets.OrderByDescending(e => e.dateTime)
                                    .Include(e => e.resortStatus)
                                    .Include(e => e.trackStatuses)
                                    .ThenInclude(e => e.parentTrack)
                                    .Include(e => e.liftStatuses)
                                    .ThenInclude(e => e.parentLift)
                                    .AsSplitQuery()
                                    .AsNoTracking()
                                    .FirstOrDefaultAsync(e => e.resortId == selectedResortId);
            cameras = await database.cameras.Where(e => e.resortId == selectedResortId).ToArrayAsync();
        }

        await getWeather();

        loading = false;
        StateHasChanged();
    }

    private async Task getWeather()
    {
        using (var database = contextFactory.CreateDbContext())
        {
            try
            {
                var resort = await database.resorts
                // .Select(e =>
                // new Resort {
                //     coordinatesX = e.coordinatesX,
                //     coordinatesY = e.coordinatesY
                // })
                .FirstOrDefaultAsync(e => e.id == selectedResortId);
                var cordX = forecastClient.convertToDecimalDegrees(resort.coordinatesX);
                var cordY = forecastClient.convertToDecimalDegrees(resort.coordinatesY);

                var forecastModel = await forecastClient.GetWeather(cordX, cordY);
                forecastTableData = forecastClient.ParseForecastModelToTable(forecastModel);
            }
            catch
            {
                forecastTableData = Array.Empty<ForecastTableModel>();
            }

            //var coordinateX = forecastClient.convertToDecimalDegrees();
        }  
    }
}
