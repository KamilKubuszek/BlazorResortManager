@using System.Text.Json
@using System.Globalization
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@if (!loading)
{
    <RadzenTabs @bind-SelectedIndex=@pageIndex Change="fetchData" Style="height: 100%;">
        <Tabs>
            <RadzenTabsItem Text="@local["Status"]">
                <_StatusCard sheet="sheet" />
            </RadzenTabsItem>

            <RadzenTabsItem Text="@local["Weather"]" Style="height:100%; overflow-y: hidden">
                <RadzenDataGrid Data="forecastTableData" TItem="ForecastTableModel" Style="height: 280px;">
                    <Columns>
                        <RadzenDataGridColumn Title="@local["Day"]">
                            <Template Context="timeserie">
                                @(timeserie.time.DayOfWeek + " "
                                + timeserie.time.Day + " "
                                + timeserie.time.ToString("MMM", CultureInfo.InvariantCulture)
                                + ".")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="@local["00-12"]" Width="82px" TextAlign="TextAlign.Center">
                            <Template Context="timeserie">
                                @if (timeserie.midnightToTwelve is not null)
                                {
                                    <img width="50px" draggable="false" src="@("Resources/WeatherIcons/"+timeserie.midnightToTwelve?.symbol_code+".png")" loading="lazy" />
                                }
                                else
                                {
                                    <p></p>
                                }

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="@local["12-00"]" Width="82px" TextAlign="TextAlign.Center">
                            <Template Context="timeserie">
                                @if (timeserie.twelveToMidnight is not null)
                                {
                                    <img width="50px" draggable="false" src="@("Resources/WeatherIcons/"+timeserie.twelveToMidnight?.symbol_code+".png")" loading="lazy" />
                                }
                                else
                                {
                                    <p></p>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="@local["Max/min temp."]">
                            <Template Context="timeserie">
                                @(timeserie.maxTemp + "/" + timeserie.minTemp)
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Title="@local["Precipitation"]">
                            <Template Context="timeserie">
                                @(timeserie.precipitation > 0 ? timeserie.precipitation : "")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="@local["Max/min wind speed"]">
                            <Template Context="timeserie">
                                @(timeserie.maxWind + "/" + timeserie.minWind + " m/s")
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <p>
                    @local["Powered by"] <a class="text-blue-500 hover:underline" href="https://www.yr.no">Norwegian Meteorological Institute and NRK</a>
                </p>
            </RadzenTabsItem>

            <RadzenTabsItem Text="@local["Cameras"]">
                @if (cameras.Any())
                {
                    <div class="h-[300px] relative w-full">
                        <iframe class="h-full w-full" src="@cameras[currentCameraIndex].link"></iframe>
                        @if (currentCameraIndex != 0)
                        {
                            <div @onclick=@(() => changeCamera(false))
                                 class="cursor-pointer text-center absolute top-1/4 left-0 block h-[150px] w-[50px] text-3xl text-white leading-[150px] bg-gray-400 hover:bg-gray-300 opacity-50">
                                @("<")
                            </div>

                        }
                        @if (currentCameraIndex + 1 < cameras.Count())
                        {
                            <div @onclick=@(() => changeCamera(true))
                                 class="cursor-pointer text-center absolute top-1/4 right-0 block h-[150px] w-[50px] text-3xl text-white leading-[150px] bg-gray-400 hover:bg-gray-300 opacity-50">
                                @(">")
                            </div>
                        }

                    </div>


                }
                else
                {
                    <p>@local["There are no cameras available"]</p>
                }
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <_LoadingScreen />
}
}
@inject IStringLocalizer<AppLanguage> local
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject IForecastClient forecastClient
@code {
    private StatusSheet? sheet = null;

    private Camera[] cameras = [];
    private int currentCameraIndex { get; set; } = 0;

    IEnumerable<ForecastTableModel> forecastTableData;

    private int pageIndex { get; set; } = 0;

    [Parameter]
    public Guid selectedResortId { get; set; }

    private bool loading { get; set; } = false;

    protected override void OnInitialized()
    {
        InvokeAsync(async () =>
        {
            loading = true;
            using (var database = contextFactory.CreateDbContext())
            {
                sheet = await database.statusSheets.OrderByDescending(e => e.dateTime)
                                            .Include(e => e.resortStatus)
                                            .Include(e => e.trackStatuses)
                                            .ThenInclude(e => e.parentTrack)
                                            .Include(e => e.liftStatuses)
                                            .ThenInclude(e => e.parentLift)
                                            .AsSplitQuery()
                                            .AsNoTracking()
                                            .FirstOrDefaultAsync(e => e.resortId == selectedResortId);
                cameras = await database.cameras.Where(e => e.resortId == selectedResortId).ToArrayAsync();
            }
            await getWeather();
            loading = false;
            StateHasChanged();
        });

    }

    private async Task getWeather()
    {
        var forecastModel = await forecastClient.GetWeather(11, 30);
        forecastTableData = forecastClient.ParseForecastModelToTable(forecastModel);
    }

    private async Task fetchData()
    {
        switch (pageIndex)
        {
            case 0:

                break;
            case 1:
                // await getWeather();
                break;

        }

    }

    private void changeCamera(bool switcher)
    {
        if (switcher)
        {
            if (cameras.Count() > currentCameraIndex + 1)
            {
                currentCameraIndex++;
            }
        }
        else
        {
            if (currentCameraIndex > 0)
            {
                currentCameraIndex--;
            }
        }
    }
}
