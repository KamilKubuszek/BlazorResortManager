@using System.Text.Json
@using System.Globalization
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<style>
/*     body{
        overflow-y: hidden;
        overflow-x: hidden;
    } */
    .rz-layout .rz-body{
        overflow-y: hidden;
        overflow-x: hidden;
    }
    .rz-tabview-panels{
        overflow-y: hidden;
    }
    .rz-tabview-panel{
        padding: 0;
        padding-top: 8px;
    }
    .rz-hover-secondary:hover{
        background-color: var(--rz-base-50);
    }
    #camera-toolbar{
        background-color: var(--rz-base);
    }
</style>

@if (!loading)
{

    @if (selectedCamera is null)
    {
        <RadzenTabs @bind-SelectedIndex=@pageIndex Change="tabChanged" Style="height: 100%; overflow-y: hidden">
            <Tabs>
                <RadzenTabsItem Text="@local["Status"]" Style="height:100%; overflow-y: hidden">
                    <_StatusCard displayInfo="false" sheet="sheet" />
                </RadzenTabsItem>

                <RadzenTabsItem Text="@local["Weather"]" Style="height:100%; overflow-y: hidden">
                    <RadzenDataGrid Data="forecastTableData" TItem="ForecastTableModel" Style="height: 300px;">
                        <Columns>
                            <RadzenDataGridColumn Title="@local["Day"]">
                                <Template Context="timeserie">
                                    @* @(timeserie.time.ToString)
                            @(timeserie.time.Day) *@
                                    @(timeserie.time.ToString("ddd dMMM", CultureInfo.CurrentCulture))

                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="@local["00-12"]" Width="82px" TextAlign="TextAlign.Center">
                                <Template Context="timeserie">
                                    @if (timeserie.midnightToTwelve is not null)
                                    {
                                        <img width="50px" draggable="false" src="@("Resources/WeatherIcons/"+timeserie.midnightToTwelve?.symbol_code+".png")" loading="lazy" />
                                    }
                                    else
                                    {
                                        <p></p>
                                    }

                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="@local["12-00"]" Width="82px" TextAlign="TextAlign.Center">
                                <Template Context="timeserie">
                                    @if (timeserie.twelveToMidnight is not null)
                                    {
                                        <img width="50px" draggable="false" src="@("Resources/WeatherIcons/"+timeserie.twelveToMidnight?.symbol_code+".png")" loading="lazy" />
                                    }
                                    else
                                    {
                                        <p></p>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn>
                                <HeaderTemplate>
                                    <RadzenStack Gap="0.25rem" AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" Style="width: fit-content;">
                                        <p>@local["Max/min temp."]</p>

                                        <RadzenIcon Icon="Device_Thermostat" Style="font-size: 20px;" />
                                    </RadzenStack>
                                </HeaderTemplate>
                                <Template Context="timeserie">
                                    @(timeserie.maxTemp + "/" + timeserie.minTemp)
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TextAlign="TextAlign.Center">
                                <HeaderTemplate>
                                    <RadzenStack Gap="0.25rem" AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" Style="width: fit-content;">
                                        <p>@local["Precipitation"]</p>

                                        <RadzenIcon Icon="Rainy" Style="font-size: 20px;" />
                                    </RadzenStack>
                                </HeaderTemplate>
                                <Template Context="timeserie">
                                    @(timeserie.precipitation > 0 ? timeserie.precipitation : "")
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TextAlign="TextAlign.Center">
                                <HeaderTemplate>
                                    <RadzenStack Gap="0.25rem" AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" Style="width: fit-content;">
                                        <p>@local["Wind speed"]</p>

                                        <RadzenIcon Icon="Air" Style="font-size: 20px;" />
                                    </RadzenStack>
                                </HeaderTemplate>
                                <Template Context="timeserie">
                                    @(timeserie.minWind + "-" + timeserie.maxWind + " m/s")
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    <p>
                        @local["Powered by"] <a class="text-blue-500 hover:underline" href="https://www.yr.no">Norwegian Meteorological Institute and NRK</a>
                    </p>

                </RadzenTabsItem>

                <RadzenTabsItem Text="@local["Cameras"]">
                    @if (cameras.Any())
                    {
                        <RadzenDataList Data="cameras" TItem="Camera" WrapItems="true" Style="width: 100%">
                            <Template Context="camera">
                                <div class="rz-hover-secondary box-border w-1/3 cursor-pointer hover:underline" @onclick=@( () => selectCamera(camera))>
                                    @camera.name
                                </div>
                            </Template>
                        </RadzenDataList>
                    }
                    else
                    {
                        <p>@local["There are no cameras available"]</p>
                    }


                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    }
    else
    {
        <div class="group relative h-[300px] w-full">
            <iframe class="h-[92vh] w-full" src="@cameras[currentCameraIndex].link"></iframe>
            <div id="camera-toolbar" class="group-hover:block rz-variant-filled absolute top-0 hidden w-full p-2">

                <RadzenRow>
                    <RadzenColumn Size="2">
                        @* <RadzenIcon id="iconHov" class="rz-p-4 rz-hover-secondary cursor-pointer text-2xl" Icon="Undo" @onclick=@() /> *@
                        @* <p>@local["Go back"]</p> *@
                        <RadzenButton Icon="Undo" ButtonStyle="ButtonStyle.Base" Variant="Variant.Text" Text="@local["Go back"]" Size="ButtonSize.Small" Click="@(() => selectedCamera = null)" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <p>
                            @local["On the camera you can see objects: "]
                            @foreach (var bind in cameras[currentCameraIndex].trackBindings)
                            {
                                @bind.track.name
                                if (cameras[currentCameraIndex].trackBindings.Last() != bind)
                                {
                                    @(", ")
                                }

                            }

                            @(cameras[currentCameraIndex].liftBindings.Any()
                                && cameras[currentCameraIndex].trackBindings.Any() ? ", " : "")

                            @foreach (var bind in cameras[currentCameraIndex].liftBindings)
                            {
                                @bind.lift.name
                                if (cameras[currentCameraIndex].liftBindings.Last() != bind)
                                {
                                    @(", ")
                                }
                            }
                        </p>

                    </RadzenColumn>
                </RadzenRow>
            </div>
        </div>
    }
}
else
{
    <_LoadingScreen />
}

@inject IStringLocalizer<AppLanguage> local
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject IForecastClient forecastClient
@inject IJSRuntime JSRuntime

@code {
    private StatusSheet? sheet = null;

    private Camera[] cameras = [];
    private int currentCameraIndex { get; set; } = 0;
    private Camera? selectedCamera { get; set; }

    private string[] visibleTrackNames = [];
    private string[] visibleLiftNames = [];

    IEnumerable<ForecastTableModel> forecastTableData;

    private int pageIndex { get; set; } = 0;

    [Parameter]
    public Guid selectedResortId { get; set; }

    private bool loading { get; set; } = false;

    protected override void OnInitialized()
    {
        InvokeAsync(async () =>
        {
            loading = true;
            using (var database = contextFactory.CreateDbContext())
            {
                sheet = await database.statusSheets.OrderByDescending(e => e.dateTime)
                                            .Include(e => e.resortStatus)
                                            .Include(e => e.trackStatuses)
                                            .ThenInclude(e => e.parentTrack)
                                            .Include(e => e.liftStatuses)
                                            .ThenInclude(e => e.parentLift)
                                            .AsSplitQuery()
                                            .AsNoTracking()
                                            .FirstOrDefaultAsync(e => e.resortId == selectedResortId);
                cameras = await database.cameras.Where(e => e.resortId == selectedResortId)
                    .Select(e => new Camera{
                        id = e.id,
                        name = e.name,
                        liftBindings = e.liftBindings
                            .Select(lb => new CameraLiftBinding
                            {
                                lift = new Lift
                                {
                                    name = lb.lift.name
                                }
                            }).ToArray(),
                        trackBindings = e.trackBindings
                            .Select(tb => new CameraTrackBinding
                            {
                                track = new Track
                                {
                                    name = tb.track.name
                                }
                            }).ToArray(),
                        link = e.link

                    })
                    .ToArrayAsync();
            }
            getList();
            await getWeather();
            loading = false;
            StateHasChanged();
        });

    }

    private async Task tabChanged()
    {
        switch (pageIndex)
        {
            case 0:

                break;
            case 1:
                //await JSRuntime.InvokeVoidAsync("sizeHeightToBottom", "weatherContainer");
                break;

        }

    }

    private async Task getWeather()
    {
        using (var database = contextFactory.CreateDbContext())
        {
            try
            {
                var resort = await database.resorts
                // .Select(e =>
                // new Resort {
                //     coordinatesX = e.coordinatesX,
                //     coordinatesY = e.coordinatesY
                // })
                .FirstOrDefaultAsync(e => e.id == selectedResortId);
                var cordX = forecastClient.convertToDecimalDegrees(resort.coordinatesX);
                var cordY = forecastClient.convertToDecimalDegrees(resort.coordinatesY);

                var forecastModel = await forecastClient.GetWeather(cordX, cordY);
                forecastTableData = forecastClient.ParseForecastModelToTable(forecastModel);
            }
            catch
            {
                forecastTableData = Array.Empty<ForecastTableModel>();
            }

            //var coordinateX = forecastClient.convertToDecimalDegrees();
        }
    }

    private async Task fetchData()
    {
        switch (pageIndex)
        {
            case 0:

                break;
            case 1:
                // await getWeather();
                break;

        }

    }

    private void changeCamera(bool switcher)
    {
        if (switcher)
        {
            if (cameras.Count() > currentCameraIndex + 1)
            {
                currentCameraIndex++;
                getList();
            }
        }
        else
        {
            if (currentCameraIndex > 0)
            {
                currentCameraIndex--;
                getList();
            }
        }


    }

    private void selectCamera(Camera camera){
        currentCameraIndex = Array.IndexOf(cameras, camera);
        selectedCamera = camera;
    }
    private void getList()
    {
        Console.Write(JsonSerializer.Serialize(cameras[0], new JsonSerializerOptions()
        {
            WriteIndented = true,
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles
        }));
        visibleLiftNames = cameras[currentCameraIndex].liftBindings.Select(e => e.lift.name) as string[] ?? [];
        visibleTrackNames = cameras[currentCameraIndex].trackBindings.Select(e => e.track.name) as string[] ?? [];
        StateHasChanged();
    }
}
